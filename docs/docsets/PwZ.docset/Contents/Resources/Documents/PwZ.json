[{
  "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 16208,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>class ZipperParser<\/Declaration>",
        "key.bodylength" : 15453,
        "key.bodyoffset" : 332,
        "key.doc.column" : 7,
        "key.doc.comment" : "The `ZipperParser` enables parsing over a grammar using the algorithm described\nin the paper \"Parsing with Zippers\" by Darragh and Adams (ICFP 2020).\n\nIt's implemented as a class to make management of state and encapsulation of\nhelper methods more straightforward, but that's not strictly necessary.",
        "key.doc.declaration" : "class ZipperParser",
        "key.doc.discussion" : [
          {
            "Para" : "It’s implemented as a class to make management of state and encapsulation of helper methods more straightforward, but that’s not strictly necessary."
          }
        ],
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"8\" column=\"7\"><Name>ZipperParser<\/Name><USR>s:3PwZ12ZipperParserC<\/USR><Declaration>class ZipperParser<\/Declaration><CommentParts><Abstract><Para>The <codeVoice>ZipperParser<\/codeVoice> enables parsing over a grammar using the algorithm described in the paper “Parsing with Zippers” by Darragh and Adams (ICFP 2020).<\/Para><\/Abstract><Discussion><Para>It’s implemented as a class to make management of state and encapsulation of helper methods more straightforward, but that’s not strictly necessary.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 8,
        "key.doc.name" : "ZipperParser",
        "key.doc.type" : "Class",
        "key.doclength" : 311,
        "key.docoffset" : 0,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ZipperParser<\/decl.name><\/decl.class>",
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 15474,
        "key.name" : "ZipperParser",
        "key.namelength" : 12,
        "key.nameoffset" : 318,
        "key.offset" : 312,
        "key.parsed_declaration" : "class ZipperParser",
        "key.parsed_scope.end" : 268,
        "key.parsed_scope.start" : 8,
        "key.runtime_name" : "_TtC4main12ZipperParser",
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var worklist: [<Type usr=\"s:3PwZ6Zippera\">Zipper<\/Type>]<\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "Used for keeping track of resume-able `Zipper`s produced from parsing\natomic `Tok` productions.",
            "key.doc.declaration" : "var worklist: [PwZ.Zipper]",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"11\" column=\"9\"><Name>worklist<\/Name><USR>s:3PwZ12ZipperParserC8worklistSayAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contexttGvp<\/USR><Declaration>var worklist: [PwZ.Zipper]<\/Declaration><CommentParts><Abstract><Para>Used for keeping track of resume-able <codeVoice>Zipper<\/codeVoice>s produced from parsing atomic <codeVoice>Tok<\/codeVoice> productions.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 11,
            "key.doc.name" : "worklist",
            "key.doc.type" : "Other",
            "key.doclength" : 108,
            "key.docoffset" : 337,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>worklist<\/decl.name>: <decl.var.type>[<ref.typealias usr=\"s:3PwZ6Zippera\">Zipper<\/ref.typealias>]<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 27,
            "key.name" : "worklist",
            "key.namelength" : 8,
            "key.nameoffset" : 453,
            "key.offset" : 449,
            "key.parsed_declaration" : "var worklist: [Zipper] = []",
            "key.parsed_scope.end" : 11,
            "key.parsed_scope.start" : 11,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.typename" : "[(expression: ExpressionCase, context: MemoizationRecord)]",
            "key.typeusr" : "$sSay3PwZ14ExpressionCaseO10expression_AA17MemoizationRecordC7contexttGD",
            "key.usr" : "s:3PwZ12ZipperParserC8worklistSayAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contexttGvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var tops: [<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>]<\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "Used for keeping track of completed parses resulting from parsing up\nto a `TopC` context.",
            "key.doc.declaration" : "var tops: [PwZ.Expression]",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"14\" column=\"9\"><Name>tops<\/Name><USR>s:3PwZ12ZipperParserC4topsSayAA10ExpressionCGvp<\/USR><Declaration>var tops: [PwZ.Expression]<\/Declaration><CommentParts><Abstract><Para>Used for keeping track of completed parses resulting from parsing up to a <codeVoice>TopC<\/codeVoice> context.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 14,
            "key.doc.name" : "tops",
            "key.doc.type" : "Other",
            "key.doclength" : 102,
            "key.docoffset" : 481,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>tops<\/decl.name>: <decl.var.type>[<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>]<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 27,
            "key.name" : "tops",
            "key.namelength" : 4,
            "key.nameoffset" : 591,
            "key.offset" : 587,
            "key.parsed_declaration" : "var tops: [Expression] = []",
            "key.parsed_scope.end" : 14,
            "key.parsed_scope.start" : 14,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.typename" : "[Expression]",
            "key.typeusr" : "$sSay3PwZ10ExpressionCGD",
            "key.usr" : "s:3PwZ12ZipperParserC4topsSayAA10ExpressionCGvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>func derive(withToken token: <Type usr=\"s:3PwZ5Tokena\">Token<\/Type>, atPosition position: <Type usr=\"s:3PwZ8Positiona\">Position<\/Type>, fromZipper zipper: <Type usr=\"s:3PwZ6Zippera\">Zipper<\/Type>)<\/Declaration>",
            "key.bodylength" : 9799,
            "key.bodyoffset" : 2076,
            "key.doc.column" : 10,
            "key.doc.comment" : "Derives the grammar with respect to the given token. A position is used to\nindex `MemoizationRecords` so we know when old records have gone stale.\n\nThe implementation is divided into four sub-functions, which can be divided\ninto two categories: two functions moving the current position *down* the\ngrammar, and two functions moving the current position *up* the grammar.\n\nThe theory of the procedure is given in the paper. This particular\nimplementation is more verbose than the paper's version. The hope is that\nthis version may be easier to read for those who prefer descriptive names.\nComments have been added in a few places to explain the general principles\nat play, but a more thorough discussion is, of course, left to the paper.\n\n- Parameters:\n    - token: The `Token` that we are taking the derivative with respect to.\n             In other words, we are attempting to see if one of the next\n             available atomic `Tok` positions in the grammar matches this\n             token, in which case the derivative is successful.\n    - position: The current index into the list of input `Token`s. This is\n                used to ensure we don't use stale memoization records.\n    - zipper: A representation of the \"current point\" in the grammar.",
            "key.doc.declaration" : "func derive(withToken token: Token, atPosition position: Position, fromZipper zipper: Zipper)",
            "key.doc.discussion" : [
              {
                "Para" : "The implementation is divided into four sub-functions, which can be divided into two categories: two functions moving the current position  the grammar, and two functions moving the current position  the grammar."
              },
              {
                "Para" : "The theory of the procedure is given in the paper. This particular implementation is more verbose than the paper’s version. The hope is that this version may be easier to read for those who prefer descriptive names. Comments have been added in a few places to explain the general principles at play, but a more thorough discussion is, of course, left to the paper."
              }
            ],
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"39\" column=\"10\"><Name>derive(withToken:atPosition:fromZipper:)<\/Name><USR>s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF<\/USR><Declaration>func derive(withToken token: Token, atPosition position: Position, fromZipper zipper: Zipper)<\/Declaration><CommentParts><Abstract><Para>Derives the grammar with respect to the given token. A position is used to index <codeVoice>MemoizationRecords<\/codeVoice> so we know when old records have gone stale.<\/Para><\/Abstract><Parameters><Parameter><Name>token<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The <codeVoice>Token<\/codeVoice> that we are taking the derivative with respect to. In other words, we are attempting to see if one of the next available atomic <codeVoice>Tok<\/codeVoice> positions in the grammar matches this token, in which case the derivative is successful.<\/Para><\/Discussion><\/Parameter><Parameter><Name>position<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The current index into the list of input <codeVoice>Token<\/codeVoice>s. This is used to ensure we don’t use stale memoization records.<\/Para><\/Discussion><\/Parameter><Parameter><Name>zipper<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A representation of the “current point” in the grammar.<\/Para><\/Discussion><\/Parameter><\/Parameters><Discussion><Para>The implementation is divided into four sub-functions, which can be divided into two categories: two functions moving the current position <emphasis>down<\/emphasis> the grammar, and two functions moving the current position <emphasis>up<\/emphasis> the grammar.<\/Para><Para>The theory of the procedure is given in the paper. This particular implementation is more verbose than the paper’s version. The hope is that this version may be easier to read for those who prefer descriptive names. Comments have been added in a few places to explain the general principles at play, but a more thorough discussion is, of course, left to the paper.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 39,
            "key.doc.name" : "derive(withToken:atPosition:fromZipper:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The `Token` that we are taking the derivative with respect to. In other words, we are attempting to see if one of the next available atomic `Tok` positions in the grammar matches this token, in which case the derivative is successful."
                  }
                ],
                "name" : "token"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The current index into the list of input `Token`s. This is used to ensure we don’t use stale memoization records."
                  }
                ],
                "name" : "position"
              },
              {
                "discussion" : [
                  {
                    "Para" : "A representation of the “current point” in the grammar."
                  }
                ],
                "name" : "zipper"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 1356,
            "key.docoffset" : 620,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>derive<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>withToken<\/decl.var.parameter.argument_label> <decl.var.parameter.name>token<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>atPosition<\/decl.var.parameter.argument_label> <decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ8Positiona\">Position<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>fromZipper<\/decl.var.parameter.argument_label> <decl.var.parameter.name>zipper<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ6Zippera\">Zipper<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 9895,
            "key.name" : "derive(withToken:atPosition:fromZipper:)",
            "key.namelength" : 88,
            "key.nameoffset" : 1986,
            "key.offset" : 1981,
            "key.parsed_declaration" : "func derive(withToken token: Token, atPosition position: Position, fromZipper zipper: Zipper)",
            "key.parsed_scope.end" : 194,
            "key.parsed_scope.start" : 39,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let tag: <Type usr=\"s:3PwZ3Taga\">Tag<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>tag<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ3Taga\">Tag<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 25,
                "key.name" : "tag",
                "key.namelength" : 3,
                "key.nameoffset" : 2124,
                "key.offset" : 2119,
                "key.parsed_declaration" : "let (tag, symbol) = token",
                "key.parsed_scope.end" : 41,
                "key.parsed_scope.start" : 41,
                "key.typename" : "Int",
                "key.typeusr" : "$sSiD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttFAHL_Sivp"
              },
              {
                "key.annotated_decl" : "<Declaration>let symbol: <Type usr=\"s:3PwZ6Symbola\">Symbol<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>symbol<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ6Symbola\">Symbol<\/ref.typealias><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 25,
                "key.name" : "symbol",
                "key.namelength" : 6,
                "key.nameoffset" : 2129,
                "key.offset" : 2119,
                "key.parsed_declaration" : "let (tag, symbol) = token",
                "key.parsed_scope.end" : 41,
                "key.parsed_scope.start" : 41,
                "key.typename" : "String",
                "key.typeusr" : "$sSSD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttFAIL_SSvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let expressionCase: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>expressionCase<\/decl.name>: <decl.var.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 48,
                "key.name" : "expressionCase",
                "key.namelength" : 14,
                "key.nameoffset" : 2158,
                "key.offset" : 2153,
                "key.parsed_declaration" : "let (expressionCase, memoizationRecord) = zipper",
                "key.parsed_scope.end" : 42,
                "key.parsed_scope.start" : 42,
                "key.typename" : "ExpressionCase",
                "key.typeusr" : "$s3PwZ14ExpressionCaseOD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF0nM0L_AKvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let memoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>memoizationRecord<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 48,
                "key.name" : "memoizationRecord",
                "key.namelength" : 17,
                "key.nameoffset" : 2174,
                "key.offset" : 2153,
                "key.parsed_declaration" : "let (expressionCase, memoizationRecord) = zipper",
                "key.parsed_scope.end" : 42,
                "key.parsed_scope.start" : 42,
                "key.typename" : "MemoizationRecord",
                "key.typeusr" : "$s3PwZ17MemoizationRecordCD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF011memoizationP0L_ANvp"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func deriveDown(fromContext context: <Type usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/Type>, toExpression expression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>)<\/Declaration>",
                "key.bodylength" : 1869,
                "key.bodyoffset" : 2299,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>deriveDown<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>fromContext<\/decl.var.parameter.argument_label> <decl.var.parameter.name>context<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>toExpression<\/decl.var.parameter.argument_label> <decl.var.parameter.name>expression<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.free>",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 1958,
                "key.name" : "deriveDown(fromContext:toExpression:)",
                "key.namelength" : 81,
                "key.nameoffset" : 2216,
                "key.offset" : 2211,
                "key.parsed_declaration" : "func deriveDown(fromContext context: ContextCase, toExpression expression: Expression)",
                "key.parsed_scope.end" : 72,
                "key.parsed_scope.start" : 44,
                "key.substructure" : [

                ],
                "key.typename" : "(ContextCase, Expression) -> ()",
                "key.typeusr" : "$s11fromContext12toExpressiony3PwZ0B4CaseO_AC0D0CtcD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF0D4DownL_0I7Context02toL0yAA0sM0O_AA0L0CtF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func deriveDown(fromMemoizationRecord memoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>, toExpressionCase expressionCase: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type>)<\/Declaration>",
                "key.bodylength" : 3112,
                "key.bodyoffset" : 4305,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>deriveDown<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>fromMemoizationRecord<\/decl.var.parameter.argument_label> <decl.var.parameter.name>memoizationRecord<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>toExpressionCase<\/decl.var.parameter.argument_label> <decl.var.parameter.name>expressionCase<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.free>",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 3239,
                "key.name" : "deriveDown(fromMemoizationRecord:toExpressionCase:)",
                "key.namelength" : 119,
                "key.nameoffset" : 4184,
                "key.offset" : 4179,
                "key.parsed_declaration" : "func deriveDown(fromMemoizationRecord memoizationRecord: MemoizationRecord, toExpressionCase expressionCase: ExpressionCase)",
                "key.parsed_scope.end" : 121,
                "key.parsed_scope.start" : 74,
                "key.substructure" : [

                ],
                "key.typename" : "(MemoizationRecord, ExpressionCase) -> ()",
                "key.typeusr" : "$s21fromMemoizationRecord16toExpressionCasey3PwZ0bC0C_AC0eF0OtcD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF0D4DownL0_0ioP002tolM0yAN_AKtF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func deriveUp(fromExpressionCase expressionCase: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type>, toMemoizationRecord memoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>)<\/Declaration>",
                "key.bodylength" : 958,
                "key.bodyoffset" : 7552,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>deriveUp<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>fromExpressionCase<\/decl.var.parameter.argument_label> <decl.var.parameter.name>expressionCase<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>toMemoizationRecord<\/decl.var.parameter.argument_label> <decl.var.parameter.name>memoizationRecord<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.free>",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 1083,
                "key.name" : "deriveUp(fromExpressionCase:toMemoizationRecord:)",
                "key.namelength" : 117,
                "key.nameoffset" : 7433,
                "key.offset" : 7428,
                "key.parsed_declaration" : "func deriveUp(fromExpressionCase expressionCase: ExpressionCase, toMemoizationRecord memoizationRecord: MemoizationRecord)",
                "key.parsed_scope.end" : 137,
                "key.parsed_scope.start" : 123,
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>let expression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type><\/Declaration>",
                    "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>expression<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 155,
                    "key.name" : "expression",
                    "key.namelength" : 10,
                    "key.nameoffset" : 7703,
                    "key.offset" : 7699,
                    "key.parsed_declaration" : "let expression = Expression(memoizationRecord: Sentinel.of(MemoizationRecord.self),\n                            expressionCase: expressionCase)",
                    "key.parsed_scope.end" : 126,
                    "key.parsed_scope.start" : 126,
                    "key.typename" : "Expression",
                    "key.typeusr" : "$s3PwZ10ExpressionCD",
                    "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF0D2UpL_0ilM002tooP0yAK_ANtFALL_AA0L0Cvp"
                  }
                ],
                "key.typename" : "(ExpressionCase, MemoizationRecord) -> ()",
                "key.typeusr" : "$s18fromExpressionCase19toMemoizationRecordy3PwZ0bC0O_AC0eF0CtcD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF0D2UpL_0ilM002tooP0yAK_ANtF"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func deriveUp(fromExpression expression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>, toContext context: <Type usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/Type>)<\/Declaration>",
                "key.bodylength" : 2761,
                "key.bodyoffset" : 8607,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>deriveUp<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>fromExpression<\/decl.var.parameter.argument_label> <decl.var.parameter.name>expression<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>toContext<\/decl.var.parameter.argument_label> <decl.var.parameter.name>context<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.free>",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 2848,
                "key.name" : "deriveUp(fromExpression:toContext:)",
                "key.namelength" : 79,
                "key.nameoffset" : 8526,
                "key.offset" : 8521,
                "key.parsed_declaration" : "func deriveUp(fromExpression expression: Expression, toContext context: ContextCase)",
                "key.parsed_scope.end" : 184,
                "key.parsed_scope.start" : 139,
                "key.substructure" : [

                ],
                "key.typename" : "(Expression, ContextCase) -> ()",
                "key.typeusr" : "$s14fromExpression9toContexty3PwZ0B0C_AC0D4CaseOtcD",
                "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF0D2UpL0_0iL09toContextyAA0L0C_AA0tM0OtF"
              }
            ],
            "key.typename" : "(ZipperParser) -> ((tag: Int, symbol: String), Int, (expression: ExpressionCase, context: MemoizationRecord)) -> ()",
            "key.typeusr" : "$s9withToken10atPosition10fromZipperySi3tag_SS6symbolt_Si3PwZ14ExpressionCaseO10expression_AF17MemoizationRecordC7contextttcD",
            "key.usr" : "s:3PwZ12ZipperParserC6derive9withToken10atPosition04fromB0ySi3tag_SS6symbolt_SiAA14ExpressionCaseO10expression_AA17MemoizationRecordC7contextttF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private func initializeZipper(fromExpression expression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>) -&gt; <Type usr=\"s:3PwZ6Zippera\">Zipper<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 12473
              }
            ],
            "key.bodylength" : 1194,
            "key.bodyoffset" : 12553,
            "key.doc.column" : 18,
            "key.doc.comment" : "Wraps an expression in sufficient material that it will automatically parse\nwithout needing to add special cases to the parsing machinery. However, the\nresults produced will need to be unwrapped by a call to\n`unwrapTopExpression(_:)`.\n\n- Parameters:\n    - expression: The `Expression` representing the root of the grammar to\n                  be derived over.\n- Returns: A `Zipper` properly encoding the given `Expression` so that\n           calls to `derive(withToken:atPosition:fromZipper)` proceed as\n           expected.",
            "key.doc.declaration" : "private func initializeZipper(fromExpression expression: Expression) -> Zipper",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"209\" column=\"18\"><Name>initializeZipper(fromExpression:)<\/Name><USR>s:3PwZ12ZipperParserC010initializeB033_D3AF2067F1A21C190E7D34B06C19EADFLL14fromExpressionAA0P4CaseO10expression_AA17MemoizationRecordC7contexttAA0P0C_tF<\/USR><Declaration>private func initializeZipper(fromExpression expression: Expression) -&gt; Zipper<\/Declaration><CommentParts><Abstract><Para>Wraps an expression in sufficient material that it will automatically parse without needing to add special cases to the parsing machinery. However, the results produced will need to be unwrapped by a call to <codeVoice>unwrapTopExpression(_:)<\/codeVoice>.<\/Para><\/Abstract><Parameters><Parameter><Name>expression<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The <codeVoice>Expression<\/codeVoice> representing the root of the grammar to be derived over.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A <codeVoice>Zipper<\/codeVoice> properly encoding the given <codeVoice>Expression<\/codeVoice> so that calls to <codeVoice>derive(withToken:atPosition:fromZipper)<\/codeVoice> proceed as expected.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 209,
            "key.doc.name" : "initializeZipper(fromExpression:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "The `Expression` representing the root of the grammar to be derived over."
                  }
                ],
                "name" : "expression"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "A `Zipper` properly encoding the given `Expression` so that calls to `derive(withToken:atPosition:fromZipper)` proceed as expected."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 586,
            "key.docoffset" : 11882,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>initializeZipper<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>fromExpression<\/decl.var.parameter.argument_label> <decl.var.parameter.name>expression<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:3PwZ6Zippera\">Zipper<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 1267,
            "key.name" : "initializeZipper(fromExpression:)",
            "key.namelength" : 55,
            "key.nameoffset" : 12486,
            "key.offset" : 12481,
            "key.parsed_declaration" : "private func initializeZipper(fromExpression expression: Expression) -> Zipper",
            "key.parsed_scope.end" : 222,
            "key.parsed_scope.start" : 209,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let topMemoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>topMemoizationRecord<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 360,
                "key.name" : "topMemoizationRecord",
                "key.namelength" : 20,
                "key.nameoffset" : 12566,
                "key.offset" : 12562,
                "key.parsed_declaration" : "let topMemoizationRecord = MemoizationRecord(startPosition: Sentinel.of(Position.self),\n                                             endPosition: Sentinel.of(Position.self),\n                                             parentContexts: [.TopC],\n                                             resultExpression: Sentinel.of(Expression.self))",
                "key.parsed_scope.end" : 210,
                "key.parsed_scope.start" : 210,
                "key.typename" : "MemoizationRecord",
                "key.typeusr" : "$s3PwZ17MemoizationRecordCD",
                "key.usr" : "s:3PwZ12ZipperParserC010initializeB033_D3AF2067F1A21C190E7D34B06C19EADFLL14fromExpressionAA0P4CaseO10expression_AA17MemoizationRecordC7contexttAA0P0C_tF03topsT0L_AKvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let seqMemoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>seqMemoizationRecord<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 716,
                "key.name" : "seqMemoizationRecord",
                "key.namelength" : 20,
                "key.nameoffset" : 12935,
                "key.offset" : 12931,
                "key.parsed_declaration" : "let seqMemoizationRecord = MemoizationRecord(startPosition: Sentinel.of(Position.self),\n                                             endPosition: Sentinel.of(Position.self),\n                                             parentContexts: [.SeqC(memoizationRecord: topMemoizationRecord,\n                                                                    symbol: Sentinel.of(Symbol.self),\n                                                                    leftExpressions: [],\n                                                                    rightExpressions: [expression])],\n                                             resultExpression: Sentinel.of(Expression.self))",
                "key.parsed_scope.end" : 214,
                "key.parsed_scope.start" : 214,
                "key.typename" : "MemoizationRecord",
                "key.typeusr" : "$s3PwZ17MemoizationRecordCD",
                "key.usr" : "s:3PwZ12ZipperParserC010initializeB033_D3AF2067F1A21C190E7D34B06C19EADFLL14fromExpressionAA0P4CaseO10expression_AA17MemoizationRecordC7contexttAA0P0C_tF03seqsT0L_AKvp"
              }
            ],
            "key.typename" : "(ZipperParser) -> (Expression) -> (expression: ExpressionCase, context: MemoizationRecord)",
            "key.typeusr" : "$s14fromExpression3PwZ0B4CaseO10expression_AB17MemoizationRecordC7contexttAB0B0C_tcD",
            "key.usr" : "s:3PwZ12ZipperParserC010initializeB033_D3AF2067F1A21C190E7D34B06C19EADFLL14fromExpressionAA0P4CaseO10expression_AA17MemoizationRecordC7contexttAA0P0C_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private func unwrapTopExpression(_ expression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>) -&gt; <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 14057
              }
            ],
            "key.bodylength" : 421,
            "key.bodyoffset" : 14131,
            "key.doc.column" : 18,
            "key.doc.comment" : "Unwraps a top expression resulting from a completed parse. This essentially\njust undoes the work of `initializeZipper(fromExpression)`.\n\n- Parameters:\n    expression: An `Expression` resulting from a completed parse.\n- Returns: The unwrapped inner `Expression`.",
            "key.doc.declaration" : "private func unwrapTopExpression(_ expression: Expression) -> Expression",
            "key.doc.discussion" : [
              {
                "List-Bullet" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"232\" column=\"18\"><Name>unwrapTopExpression(_:)<\/Name><USR>s:3PwZ12ZipperParserC19unwrapTopExpression33_D3AF2067F1A21C190E7D34B06C19EADFLLyAA0F0CAGF<\/USR><Declaration>private func unwrapTopExpression(_ expression: Expression) -&gt; Expression<\/Declaration><CommentParts><Abstract><Para>Unwraps a top expression resulting from a completed parse. This essentially just undoes the work of <codeVoice>initializeZipper(fromExpression)<\/codeVoice>.<\/Para><\/Abstract><ResultDiscussion><Para>The unwrapped inner <codeVoice>Expression<\/codeVoice>.<\/Para><\/ResultDiscussion><Discussion><List-Bullet><Item><Para>Parameters: expression: An <codeVoice>Expression<\/codeVoice> resulting from a completed parse.<\/Para><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 232,
            "key.doc.name" : "unwrapTopExpression(_:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "The unwrapped inner `Expression`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 298,
            "key.docoffset" : 13754,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>unwrapTopExpression<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>expression<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 488,
            "key.name" : "unwrapTopExpression(_:)",
            "key.namelength" : 45,
            "key.nameoffset" : 14070,
            "key.offset" : 14065,
            "key.parsed_declaration" : "private func unwrapTopExpression(_ expression: Expression) -> Expression",
            "key.parsed_scope.end" : 241,
            "key.parsed_scope.start" : 232,
            "key.substructure" : [

            ],
            "key.typename" : "(ZipperParser) -> (Expression) -> Expression",
            "key.typeusr" : "$sy3PwZ10ExpressionCACcD",
            "key.usr" : "s:3PwZ12ZipperParserC19unwrapTopExpression33_D3AF2067F1A21C190E7D34B06C19EADFLLyAA0F0CAGF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>func parse(inputTokens tokens: inout [<Type usr=\"s:3PwZ5Tokena\">Token<\/Type>], withGrammar grammar: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>) -&gt; [<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>]<\/Declaration>",
            "key.bodylength" : 862,
            "key.bodyoffset" : 14921,
            "key.doc.column" : 10,
            "key.doc.comment" : "Parses a sequence of input tokens against a given grammar.\n\n- Parameters:\n    - tokens: A list of `Token`s representing the input string.\n    - grammar: The grammar to parse with respect to.\n- Returns: A list of parse trees.",
            "key.doc.declaration" : "func parse(inputTokens tokens: inout [Token], withGrammar grammar: Expression) -> [Expression]",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"251\" column=\"10\"><Name>parse(inputTokens:withGrammar:)<\/Name><USR>s:3PwZ12ZipperParserC5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltGz_AHtF<\/USR><Declaration>func parse(inputTokens tokens: inout [Token], withGrammar grammar: Expression) -&gt; [Expression]<\/Declaration><CommentParts><Abstract><Para>Parses a sequence of input tokens against a given grammar.<\/Para><\/Abstract><Parameters><Parameter><Name>tokens<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A list of <codeVoice>Token<\/codeVoice>s representing the input string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>grammar<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The grammar to parse with respect to.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A list of parse trees.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 251,
            "key.doc.name" : "parse(inputTokens:withGrammar:)",
            "key.doc.parameters" : [
              {
                "discussion" : [
                  {
                    "Para" : "A list of `Token`s representing the input string."
                  }
                ],
                "name" : "tokens"
              },
              {
                "discussion" : [
                  {
                    "Para" : "The grammar to parse with respect to."
                  }
                ],
                "name" : "grammar"
              }
            ],
            "key.doc.result_discussion" : [
              {
                "Para" : "A list of parse trees."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 261,
            "key.docoffset" : 14559,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>parse<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>inputTokens<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tokens<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> [<ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>withGrammar<\/decl.var.parameter.argument_label> <decl.var.parameter.name>grammar<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 959,
            "key.name" : "parse(inputTokens:withGrammar:)",
            "key.namelength" : 73,
            "key.nameoffset" : 14830,
            "key.offset" : 14825,
            "key.parsed_declaration" : "func parse(inputTokens tokens: inout [Token], withGrammar grammar: Expression) -> [Expression]",
            "key.parsed_scope.end" : 267,
            "key.parsed_scope.start" : 251,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func parse(inputTokens tokens: inout [<Type usr=\"s:3PwZ5Tokena\">Token<\/Type>], atPosition position: <Type usr=\"s:3PwZ8Positiona\">Position<\/Type>) -&gt; [<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>]<\/Declaration>",
                "key.bodylength" : 632,
                "key.bodyoffset" : 15024,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>parse<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>inputTokens<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tokens<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> [<ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>atPosition<\/decl.var.parameter.argument_label> <decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ8Positiona\">Position<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>]<\/decl.function.returntype><\/decl.function.free>",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 727,
                "key.name" : "parse(inputTokens:atPosition:)",
                "key.namelength" : 71,
                "key.nameoffset" : 14935,
                "key.offset" : 14930,
                "key.parsed_declaration" : "func parse(inputTokens tokens: inout [Token], atPosition position: Position) -> [Expression]",
                "key.parsed_scope.end" : 264,
                "key.parsed_scope.start" : 252,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ12ZipperParserC5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltGz_AHtF\">parse(inputTokens:withGrammar:)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>let savedZippers: [<Type usr=\"s:3PwZ6Zippera\">Zipper<\/Type>]<\/Declaration>",
                    "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>savedZippers<\/decl.name>: <decl.var.type>[<ref.typealias usr=\"s:3PwZ6Zippera\">Zipper<\/ref.typealias>]<\/decl.var.type><\/decl.var.local>",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 27,
                    "key.name" : "savedZippers",
                    "key.namelength" : 12,
                    "key.nameoffset" : 15041,
                    "key.offset" : 15037,
                    "key.parsed_declaration" : "let savedZippers = worklist",
                    "key.parsed_scope.end" : 253,
                    "key.parsed_scope.start" : 253,
                    "key.typename" : "[(expression: ExpressionCase, context: MemoizationRecord)]",
                    "key.typeusr" : "$sSay3PwZ14ExpressionCaseO10expression_AA17MemoizationRecordC7contexttGD",
                    "key.usr" : "s:3PwZ12ZipperParserC5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltGz_AHtFADL_AE10atPositionAiLz_SitF12savedZippersL_SayAA0I4CaseO10expression_AA17MemoizationRecordC7contexttGvp"
                  }
                ],
                "key.typename" : "(inout [(tag: Int, symbol: String)], Int) -> [Expression]",
                "key.typeusr" : "$s11inputTokens10atPositionSay3PwZ10ExpressionCGSaySi3tag_SS6symboltGz_SitcD",
                "key.usr" : "s:3PwZ12ZipperParserC5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltGz_AHtFADL_AE10atPositionAiLz_SitF"
              }
            ],
            "key.typename" : "(ZipperParser) -> (inout [(tag: Int, symbol: String)], Expression) -> [Expression]",
            "key.typeusr" : "$s11inputTokens11withGrammarSay3PwZ10ExpressionCGSaySi3tag_SS6symboltGz_AEtcD",
            "key.usr" : "s:3PwZ12ZipperParserC5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltGz_AHtF"
          }
        ],
        "key.typename" : "ZipperParser.Type",
        "key.typeusr" : "$s3PwZ12ZipperParserCmD",
        "key.usr" : "s:3PwZ12ZipperParserC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func parse(inputTokens tokens: inout [<Type usr=\"s:3PwZ5Tokena\">Token<\/Type>], withGrammar grammar: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>) -&gt; [<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>]<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 16026
          }
        ],
        "key.bodylength" : 77,
        "key.bodyoffset" : 16129,
        "key.doc.column" : 13,
        "key.doc.comment" : "Parses a sequence of input tokens against a given grammar.\n\n- Parameters:\n    - tokens: A list of `Token`s representing the input string.\n    - grammar: The grammar to parse with respect to.\n- Returns: A list of parse trees.",
        "key.doc.declaration" : "public func parse(inputTokens tokens: inout [Token], withGrammar grammar: Expression) -> [Expression]",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift\" line=\"278\" column=\"13\"><Name>parse(inputTokens:withGrammar:)<\/Name><USR>s:3PwZ5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltGz_AFtF<\/USR><Declaration>public func parse(inputTokens tokens: inout [Token], withGrammar grammar: Expression) -&gt; [Expression]<\/Declaration><CommentParts><Abstract><Para>Parses a sequence of input tokens against a given grammar.<\/Para><\/Abstract><Parameters><Parameter><Name>tokens<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>A list of <codeVoice>Token<\/codeVoice>s representing the input string.<\/Para><\/Discussion><\/Parameter><Parameter><Name>grammar<\/Name><Direction isExplicit=\"0\">in<\/Direction><Discussion><Para>The grammar to parse with respect to.<\/Para><\/Discussion><\/Parameter><\/Parameters><ResultDiscussion><Para>A list of parse trees.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 278,
        "key.doc.name" : "parse(inputTokens:withGrammar:)",
        "key.doc.parameters" : [
          {
            "discussion" : [
              {
                "Para" : "A list of `Token`s representing the input string."
              }
            ],
            "name" : "tokens"
          },
          {
            "discussion" : [
              {
                "Para" : "The grammar to parse with respect to."
              }
            ],
            "name" : "grammar"
          }
        ],
        "key.doc.result_discussion" : [
          {
            "Para" : "A list of parse trees."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 237,
        "key.docoffset" : 15788,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Parser.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>parse<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>inputTokens<\/decl.var.parameter.argument_label> <decl.var.parameter.name>tokens<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> [<ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>withGrammar<\/decl.var.parameter.argument_label> <decl.var.parameter.name>grammar<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>]<\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 174,
        "key.name" : "parse(inputTokens:withGrammar:)",
        "key.namelength" : 73,
        "key.nameoffset" : 16038,
        "key.offset" : 16033,
        "key.parsed_declaration" : "public func parse(inputTokens tokens: inout [Token], withGrammar grammar: Expression) -> [Expression]",
        "key.parsed_scope.end" : 280,
        "key.parsed_scope.start" : 278,
        "key.substructure" : [

        ],
        "key.typename" : "(inout [(tag: Int, symbol: String)], Expression) -> [Expression]",
        "key.typeusr" : "$s11inputTokens11withGrammarSay3PwZ10ExpressionCGSaySi3tag_SS6symboltGz_AEtcD",
        "key.usr" : "s:3PwZ5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltGz_AFtF"
      }
    ]
  }
}, {
  "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 3183,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public class ReferenceArray&lt;Element&gt; : <Type usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/Type> where Element : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 179
          }
        ],
        "key.bodylength" : 1300,
        "key.bodyoffset" : 255,
        "key.doc.column" : 14,
        "key.doc.comment" : "The `ReferenceArray` is a wrapper around the standard `Array` that provides\nreference semantics for mutable array objects.\n\nOnly the necessary methods are implemented.",
        "key.doc.declaration" : "public class ReferenceArray<Element> : ExpressibleByArrayLiteral where Element : Equatable",
        "key.doc.discussion" : [
          {
            "Para" : "Only the necessary methods are implemented."
          }
        ],
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"7\" column=\"14\"><Name>ReferenceArray<\/Name><USR>s:3PwZ14ReferenceArrayC<\/USR><Declaration>public class ReferenceArray&lt;Element&gt; : ExpressibleByArrayLiteral where Element : Equatable<\/Declaration><CommentParts><Abstract><Para>The <codeVoice>ReferenceArray<\/codeVoice> is a wrapper around the standard <codeVoice>Array<\/codeVoice> that provides reference semantics for mutable array objects.<\/Para><\/Abstract><Discussion><Para>Only the necessary methods are implemented.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 7,
        "key.doc.name" : "ReferenceArray",
        "key.doc.type" : "Class",
        "key.doclength" : 178,
        "key.docoffset" : 0,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 25,
            "key.offset" : 228
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ReferenceArray<\/decl.name>&lt;<decl.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "ExpressibleByArrayLiteral"
          }
        ],
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 1370,
        "key.name" : "ReferenceArray",
        "key.namelength" : 14,
        "key.nameoffset" : 192,
        "key.offset" : 186,
        "key.parsed_declaration" : "public class ReferenceArray<Element: Equatable>: ExpressibleByArrayLiteral",
        "key.parsed_scope.end" : 52,
        "key.parsed_scope.start" : 7,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>Element : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
            "key.elements" : [
              {
                "key.kind" : "source.lang.swift.structure.elem.typeref",
                "key.length" : 9,
                "key.offset" : 216
              }
            ],
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>Element<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
            "key.inheritedtypes" : [
              {
                "key.name" : "Equatable"
              }
            ],
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 18,
            "key.name" : "Element",
            "key.namelength" : 7,
            "key.nameoffset" : 207,
            "key.offset" : 207,
            "key.parsed_declaration" : "public class ReferenceArray<Element: Equatable",
            "key.parsed_scope.end" : 7,
            "key.parsed_scope.start" : 7,
            "key.typename" : "Element.Type",
            "key.typeusr" : "$sxmD",
            "key.usr" : "s:3PwZ14ReferenceArrayC7Elementxmfp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate var items: [Element]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 327
              }
            ],
            "key.doc.column" : 21,
            "key.doc.comment" : "The internal array that the class provides a reference to.",
            "key.doc.declaration" : "fileprivate var items: [Element]",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"9\" column=\"21\"><Name>items<\/Name><USR>s:3PwZ14ReferenceArrayC5items33_3EC47AE0F72BE3C03331A4581A9EE565LLSayxGvp<\/USR><Declaration>fileprivate var items: [Element]<\/Declaration><CommentParts><Abstract><Para>The internal array that the class provides a reference to.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 9,
            "key.doc.name" : "items",
            "key.doc.type" : "Other",
            "key.doclength" : 63,
            "key.docoffset" : 260,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>items<\/decl.name>: <decl.var.type>[Element]<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 25,
            "key.name" : "items",
            "key.namelength" : 5,
            "key.nameoffset" : 343,
            "key.offset" : 339,
            "key.parsed_declaration" : "fileprivate var items: [Element] = []",
            "key.parsed_scope.end" : 9,
            "key.parsed_scope.start" : 9,
            "key.setter_accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.typename" : "[Element]",
            "key.typeusr" : "$sSayxGD",
            "key.usr" : "s:3PwZ14ReferenceArrayC5items33_3EC47AE0F72BE3C03331A4581A9EE565LLSayxGvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init&lt;S&gt;(_ sequence: <Type usr=\"s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/Type>) where Element == S.Element, S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 437
              }
            ],
            "key.bodylength" : 77,
            "key.bodyoffset" : 520,
            "key.doc.column" : 12,
            "key.doc.comment" : "Initializes the array from an existing sequence of values.",
            "key.doc.declaration" : "public init<S>(_ sequence: S) where Element == S.Element, S : Sequence",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"12\" column=\"12\"><Name>init(_:)<\/Name><USR>s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc<\/USR><Declaration>public init&lt;S&gt;(_ sequence: S) where Element == S.Element, S : Sequence<\/Declaration><CommentParts><Abstract><Para>Initializes the array from an existing sequence of values.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 12,
            "key.doc.name" : "init(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 63,
            "key.docoffset" : 370,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>&lt;<decl.generic_type_param usr=\"s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>sequence<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element == S.Element<\/decl.generic_type_requirement>, <decl.generic_type_requirement>S : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 154,
            "key.name" : "init(_:)",
            "key.namelength" : 32,
            "key.nameoffset" : 444,
            "key.offset" : 444,
            "key.parsed_declaration" : "public init<S: Sequence>(_ sequence: S)\n  where S.Iterator.Element == Element",
            "key.parsed_scope.end" : 17,
            "key.parsed_scope.start" : 12,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayC12arrayLiteralACyxGxd_tcfc\">init(arrayLiteral:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
                "key.elements" : [
                  {
                    "key.kind" : "source.lang.swift.structure.elem.typeref",
                    "key.length" : 8,
                    "key.offset" : 452
                  }
                ],
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name> : <decl.generic_type_param.constraint><ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_param.constraint><\/decl.generic_type_param>",
                "key.inheritedtypes" : [
                  {
                    "key.name" : "Sequence"
                  }
                ],
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 11,
                "key.name" : "S",
                "key.namelength" : 1,
                "key.nameoffset" : 449,
                "key.offset" : 449,
                "key.parsed_declaration" : "public init<S: Sequence",
                "key.parsed_scope.end" : 12,
                "key.parsed_scope.start" : 12,
                "key.typename" : "S.Type",
                "key.typeusr" : "$sqd__mD",
                "key.usr" : "s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc1SL_qd__mfp"
              }
            ],
            "key.typename" : "<Element, S where Element : Equatable, Element == S.Element, S : Sequence> (ReferenceArray<Element>.Type) -> (S) -> ReferenceArray<Element>",
            "key.typeusr" : "$sy3PwZ14ReferenceArrayCyxGqd__c7ElementQyd__RszSTRd__luD",
            "key.usr" : "s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public required convenience init(arrayLiteral elements: <Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>...)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.convenience",
                "key.length" : 11,
                "key.offset" : 1000
              },
              {
                "key.attribute" : "source.decl.attribute.required",
                "key.length" : 8,
                "key.offset" : 991
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 984
              }
            ],
            "key.bodylength" : 33,
            "key.bodyoffset" : 1053,
            "key.doc.column" : 33,
            "key.doc.comment" : "Initializes the array from an array literal. This means that you can write\ncode such as:\n\n    let ref: ReferenceArray<Int> = [0, 1, 2]\n\nAlternatively, type inference can remove the need to write the reference\narray's type at call sites:\n\n    func foo(_ ref: ReferenceArray<Int>) {\n        ...\n    }\n\n    foo([2, 4, 8])",
            "key.doc.declaration" : "public required convenience init(arrayLiteral elements: Element...)",
            "key.doc.discussion" : [
              {
                "CodeListing" : ""
              },
              {
                "Para" : "Alternatively, type inference can remove the need to write the reference array’s type at call sites:"
              },
              {
                "CodeListing" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"34\" column=\"33\"><Name>init(arrayLiteral:)<\/Name><USR>s:3PwZ14ReferenceArrayC12arrayLiteralACyxGxd_tcfc<\/USR><Declaration>public required convenience init(arrayLiteral elements: Element...)<\/Declaration><CommentParts><Abstract><Para>Initializes the array from an array literal. This means that you can write code such as:<\/Para><\/Abstract><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let ref: ReferenceArray<Int> = [0, 1, 2]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Alternatively, type inference can remove the need to write the reference array’s type at call sites:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[func foo(_ ref: ReferenceArray<Int>) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    ...]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[foo([2, 4, 8])]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 34,
            "key.doc.name" : "init(arrayLiteral:)",
            "key.doc.type" : "Function",
            "key.doclength" : 375,
            "key.docoffset" : 604,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>required<\/syntaxtype.keyword> <syntaxtype.keyword>convenience<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>arrayLiteral<\/decl.var.parameter.argument_label> <decl.var.parameter.name>elements<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param><\/decl.var.parameter.type>...<\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 75,
            "key.name" : "init(arrayLiteral:)",
            "key.namelength" : 39,
            "key.nameoffset" : 1012,
            "key.offset" : 1012,
            "key.overrides" : [
              {
                "key.usr" : "s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc"
              }
            ],
            "key.parsed_declaration" : "public required convenience init(arrayLiteral elements: Element...)",
            "key.parsed_scope.end" : 36,
            "key.parsed_scope.start" : 34,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc\">init(_:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : Equatable> (ReferenceArray<Element>.Type) -> (Element...) -> ReferenceArray<Element>",
            "key.typeusr" : "$s12arrayLiteral3PwZ14ReferenceArrayCyxGxd_tcD",
            "key.usr" : "s:3PwZ14ReferenceArrayC12arrayLiteralACyxGxd_tcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func append(_ element: <Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1154
              }
            ],
            "key.bodylength" : 35,
            "key.bodyoffset" : 1194,
            "key.doc.column" : 17,
            "key.doc.comment" : "Adds a new element to the array at the end position.",
            "key.doc.declaration" : "public func append(_ element: Element)",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"39\" column=\"17\"><Name>append(_:)<\/Name><USR>s:3PwZ14ReferenceArrayC6appendyyxF<\/USR><Declaration>public func append(_ element: Element)<\/Declaration><CommentParts><Abstract><Para>Adds a new element to the array at the end position.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 39,
            "key.doc.name" : "append(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 57,
            "key.docoffset" : 1093,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>append<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>element<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 69,
            "key.name" : "append(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 1166,
            "key.offset" : 1161,
            "key.parsed_declaration" : "public func append(_ element: Element)",
            "key.parsed_scope.end" : 41,
            "key.parsed_scope.start" : 39,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : Equatable> (ReferenceArray<Element>) -> (Element) -> ()",
            "key.typeusr" : "$syyxcD",
            "key.usr" : "s:3PwZ14ReferenceArrayC6appendyyxF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func insert(_ element: <Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>, at position: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1300
              }
            ],
            "key.bodylength" : 49,
            "key.bodyoffset" : 1358,
            "key.doc.column" : 17,
            "key.doc.comment" : "Adds a new element to the array at a specific position.",
            "key.doc.declaration" : "public func insert(_ element: Element, at position: Int)",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"44\" column=\"17\"><Name>insert(_:at:)<\/Name><USR>s:3PwZ14ReferenceArrayC6insert_2atyx_SitF<\/USR><Declaration>public func insert(_ element: Element, at position: Int)<\/Declaration><CommentParts><Abstract><Para>Adds a new element to the array at a specific position.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 44,
            "key.doc.name" : "insert(_:at:)",
            "key.doc.type" : "Function",
            "key.doclength" : 60,
            "key.docoffset" : 1236,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>insert<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>element<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>at<\/decl.var.parameter.argument_label> <decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 101,
            "key.name" : "insert(_:at:)",
            "key.namelength" : 44,
            "key.nameoffset" : 1312,
            "key.offset" : 1307,
            "key.parsed_declaration" : "public func insert(_ element: Element, at position: Int)",
            "key.parsed_scope.end" : 46,
            "key.parsed_scope.start" : 44,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayC6insertyyxF\">insert(_:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : Equatable> (ReferenceArray<Element>) -> (Element, Int) -> ()",
            "key.typeusr" : "$s_2atyx_SitcD",
            "key.usr" : "s:3PwZ14ReferenceArrayC6insert_2atyx_SitF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func insert(_ element: <Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1477
              }
            ],
            "key.bodylength" : 36,
            "key.bodyoffset" : 1517,
            "key.doc.column" : 17,
            "key.doc.comment" : "Adds a new element to the array at the start position.",
            "key.doc.declaration" : "public func insert(_ element: Element)",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"49\" column=\"17\"><Name>insert(_:)<\/Name><USR>s:3PwZ14ReferenceArrayC6insertyyxF<\/USR><Declaration>public func insert(_ element: Element)<\/Declaration><CommentParts><Abstract><Para>Adds a new element to the array at the start position.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 49,
            "key.doc.name" : "insert(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 59,
            "key.docoffset" : 1414,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>insert<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>element<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 70,
            "key.name" : "insert(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 1489,
            "key.offset" : 1484,
            "key.parsed_declaration" : "public func insert(_ element: Element)",
            "key.parsed_scope.end" : 51,
            "key.parsed_scope.start" : 49,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayC6insert_2atyx_SitF\">insert(_:at:)<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : Equatable> (ReferenceArray<Element>) -> (Element) -> ()",
            "key.typeusr" : "$syyxcD",
            "key.usr" : "s:3PwZ14ReferenceArrayC6insertyyxF"
          }
        ],
        "key.typename" : "ReferenceArray<Element>.Type",
        "key.typeusr" : "$s3PwZ14ReferenceArrayCyxGmD",
        "key.usr" : "s:3PwZ14ReferenceArrayC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>public class ReferenceArray&lt;Element&gt; : <Type usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/Type> where Element : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.bodylength" : 395,
        "key.bodyoffset" : 1594,
        "key.doc.column" : 14,
        "key.doc.declaration" : "public class ReferenceArray<Element> : ExpressibleByArrayLiteral where Element : Equatable",
        "key.doc.discussion" : [
          {
            "Para" : "Only the necessary methods are implemented."
          }
        ],
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"7\" column=\"14\"><Name>ReferenceArray<\/Name><USR>s:3PwZ14ReferenceArrayC<\/USR><Declaration>public class ReferenceArray&lt;Element&gt; : ExpressibleByArrayLiteral where Element : Equatable<\/Declaration><CommentParts><Abstract><Para>The <codeVoice>ReferenceArray<\/codeVoice> is a wrapper around the standard <codeVoice>Array<\/codeVoice> that provides reference semantics for mutable array objects.<\/Para><\/Abstract><Discussion><Para>Only the necessary methods are implemented.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 7,
        "key.doc.name" : "ReferenceArray",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 8,
            "key.offset" : 1584
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ReferenceArray<\/decl.name>&lt;<decl.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Sequence"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 432,
        "key.name" : "ReferenceArray",
        "key.namelength" : 14,
        "key.nameoffset" : 1568,
        "key.offset" : 1558,
        "key.parsed_declaration" : "extension ReferenceArray: Sequence",
        "key.parsed_scope.end" : 67,
        "key.parsed_scope.start" : 54,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias Iterator = <Type usr=\"s:s11AnyIteratorV\">AnyIterator<\/Type>&lt;<Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1656
              }
            ],
            "key.doc.column" : 22,
            "key.doc.comment" : "Iterators over the `ReferenceArray` are generic.",
            "key.doc.declaration" : "public typealias Iterator = AnyIterator<Element>",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"56\" column=\"22\"><Name>Iterator<\/Name><USR>s:3PwZ14ReferenceArrayC8Iteratora<\/USR><Declaration>public typealias Iterator = AnyIterator&lt;Element&gt;<\/Declaration><CommentParts><Abstract><Para>Iterators over the <codeVoice>ReferenceArray<\/codeVoice> are generic.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 56,
            "key.doc.name" : "Iterator",
            "key.doc.type" : "Other",
            "key.doclength" : 53,
            "key.docoffset" : 1599,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Iterator<\/decl.name> = <ref.struct usr=\"s:s11AnyIteratorV\">AnyIterator<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 41,
            "key.name" : "Iterator",
            "key.namelength" : 8,
            "key.nameoffset" : 1673,
            "key.offset" : 1663,
            "key.overrides" : [
              {
                "key.usr" : "s:ST8IteratorQa"
              },
              {
                "key.usr" : "s:Sl8IteratorQa"
              }
            ],
            "key.parsed_declaration" : "public typealias Iterator = AnyIterator<Element>",
            "key.parsed_scope.end" : 56,
            "key.parsed_scope.start" : 56,
            "key.typename" : "AnyIterator<Element>.Type",
            "key.typeusr" : "$ss11AnyIteratorVyxGmD",
            "key.usr" : "s:3PwZ14ReferenceArrayC8Iteratora"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func makeIterator() -&gt; <Type usr=\"s:3PwZ14ReferenceArrayC8Iteratora\">Iterator<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1823
              }
            ],
            "key.bodylength" : 124,
            "key.bodyoffset" : 1863,
            "key.doc.column" : 17,
            "key.doc.comment" : "Creates a new iterator for the `ReferenceArray`, wrapped as an\n`AnyIterator` to keep it generic.",
            "key.doc.declaration" : "public func makeIterator() -> Iterator",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"60\" column=\"17\"><Name>makeIterator()<\/Name><USR>s:3PwZ14ReferenceArrayC12makeIterators03AnyE0VyxGyF<\/USR><Declaration>public func makeIterator() -&gt; Iterator<\/Declaration><CommentParts><Abstract><Para>Creates a new iterator for the <codeVoice>ReferenceArray<\/codeVoice>, wrapped as an <codeVoice>AnyIterator<\/codeVoice> to keep it generic.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 60,
            "key.doc.name" : "makeIterator()",
            "key.doc.type" : "Function",
            "key.doclength" : 109,
            "key.docoffset" : 1710,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>makeIterator<\/decl.name>() -&gt; <decl.function.returntype><ref.typealias usr=\"s:3PwZ14ReferenceArrayC8Iteratora\">Iterator<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 158,
            "key.name" : "makeIterator()",
            "key.namelength" : 14,
            "key.nameoffset" : 1835,
            "key.offset" : 1830,
            "key.overrides" : [
              {
                "key.usr" : "s:ST12makeIterator0B0QzyF"
              },
              {
                "key.usr" : "s:Sl12makeIterator0B0QzyF"
              }
            ],
            "key.parsed_declaration" : "public func makeIterator() -> Iterator",
            "key.parsed_scope.end" : 66,
            "key.parsed_scope.start" : 60,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var iterator: <Type usr=\"s:s16IndexingIteratorV\">IndexingIterator<\/Type>&lt;[Element]&gt;<\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>iterator<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s16IndexingIteratorV\">IndexingIterator<\/ref.struct>&lt;[Element]&gt;<\/decl.var.type><\/decl.var.local>",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 35,
                "key.name" : "iterator",
                "key.namelength" : 8,
                "key.nameoffset" : 1876,
                "key.offset" : 1872,
                "key.parsed_declaration" : "var iterator = items.makeIterator()",
                "key.parsed_scope.end" : 61,
                "key.parsed_scope.start" : 61,
                "key.typename" : "IndexingIterator<[Element]>",
                "key.typeusr" : "$ss16IndexingIteratorVySayxGGD",
                "key.usr" : "s:3PwZ14ReferenceArrayC12makeIterators03AnyE0VyxGyF8iteratorL_s08IndexingE0VySayxGGvp"
              }
            ],
            "key.typename" : "<Element where Element : Equatable> (ReferenceArray<Element>) -> () -> AnyIterator<Element>",
            "key.typeusr" : "$ss11AnyIteratorVyxGycD",
            "key.usr" : "s:3PwZ14ReferenceArrayC12makeIterators03AnyE0VyxGyF"
          }
        ],
        "key.typename" : "ReferenceArray<Element>.Type",
        "key.typeusr" : "$s3PwZ14ReferenceArrayCyxGmD",
        "key.usr" : "s:3PwZ14ReferenceArrayC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>public class ReferenceArray&lt;Element&gt; : <Type usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/Type> where Element : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.bodylength" : 827,
        "key.bodyoffset" : 2030,
        "key.doc.column" : 14,
        "key.doc.declaration" : "public class ReferenceArray<Element> : ExpressibleByArrayLiteral where Element : Equatable",
        "key.doc.discussion" : [
          {
            "Para" : "Only the necessary methods are implemented."
          }
        ],
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"7\" column=\"14\"><Name>ReferenceArray<\/Name><USR>s:3PwZ14ReferenceArrayC<\/USR><Declaration>public class ReferenceArray&lt;Element&gt; : ExpressibleByArrayLiteral where Element : Equatable<\/Declaration><CommentParts><Abstract><Para>The <codeVoice>ReferenceArray<\/codeVoice> is a wrapper around the standard <codeVoice>Array<\/codeVoice> that provides reference semantics for mutable array objects.<\/Para><\/Abstract><Discussion><Para>Only the necessary methods are implemented.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 7,
        "key.doc.name" : "ReferenceArray",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 10,
            "key.offset" : 2018
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ReferenceArray<\/decl.name>&lt;<decl.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Collection"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 866,
        "key.name" : "ReferenceArray",
        "key.namelength" : 14,
        "key.nameoffset" : 2002,
        "key.offset" : 1992,
        "key.parsed_declaration" : "extension ReferenceArray: Collection",
        "key.parsed_scope.end" : 99,
        "key.parsed_scope.start" : 69,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public typealias Index = <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2090
              }
            ],
            "key.doc.column" : 22,
            "key.doc.comment" : "The type of indices into the `ReferenceArray`.",
            "key.doc.declaration" : "public typealias Index = Int",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"71\" column=\"22\"><Name>Index<\/Name><USR>s:3PwZ14ReferenceArrayC5Indexa<\/USR><Declaration>public typealias Index = Int<\/Declaration><CommentParts><Abstract><Para>The type of indices into the <codeVoice>ReferenceArray<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 71,
            "key.doc.name" : "Index",
            "key.doc.type" : "Other",
            "key.doclength" : 51,
            "key.docoffset" : 2035,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Index<\/decl.name> = <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.typealias>",
            "key.kind" : "source.lang.swift.decl.typealias",
            "key.length" : 21,
            "key.name" : "Index",
            "key.namelength" : 5,
            "key.nameoffset" : 2107,
            "key.offset" : 2097,
            "key.overrides" : [
              {
                "key.usr" : "s:Sl5IndexQa"
              }
            ],
            "key.parsed_declaration" : "public typealias Index = Int",
            "key.parsed_scope.end" : 71,
            "key.parsed_scope.start" : 71,
            "key.typename" : "Int.Type",
            "key.typeusr" : "$sSimD",
            "key.usr" : "s:3PwZ14ReferenceArrayC5Indexa"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var startIndex: <Type usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2167
              }
            ],
            "key.bodylength" : 37,
            "key.bodyoffset" : 2197,
            "key.doc.column" : 16,
            "key.doc.comment" : "The start index of the collection.",
            "key.doc.declaration" : "public var startIndex: Index { get }",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"74\" column=\"16\"><Name>startIndex<\/Name><USR>s:3PwZ14ReferenceArrayC10startIndexSivp<\/USR><Declaration>public var startIndex: Index { get }<\/Declaration><CommentParts><Abstract><Para>The start index of the collection.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 74,
            "key.doc.name" : "startIndex",
            "key.doc.type" : "Other",
            "key.doclength" : 39,
            "key.docoffset" : 2124,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>startIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 61,
            "key.name" : "startIndex",
            "key.namelength" : 10,
            "key.nameoffset" : 2178,
            "key.offset" : 2174,
            "key.overrides" : [
              {
                "key.usr" : "s:Sl10startIndex0B0Qzvp"
              }
            ],
            "key.parsed_declaration" : "public var startIndex: Index",
            "key.parsed_scope.end" : 76,
            "key.parsed_scope.start" : 74,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:3PwZ14ReferenceArrayC10startIndexSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var endIndex: <Type usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2282
              }
            ],
            "key.bodylength" : 35,
            "key.bodyoffset" : 2310,
            "key.doc.column" : 16,
            "key.doc.comment" : "The end index of the collection.",
            "key.doc.declaration" : "public var endIndex: Index { get }",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"79\" column=\"16\"><Name>endIndex<\/Name><USR>s:3PwZ14ReferenceArrayC8endIndexSivp<\/USR><Declaration>public var endIndex: Index { get }<\/Declaration><CommentParts><Abstract><Para>The end index of the collection.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 79,
            "key.doc.name" : "endIndex",
            "key.doc.type" : "Other",
            "key.doclength" : 37,
            "key.docoffset" : 2241,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>endIndex<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/ref.typealias><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 57,
            "key.name" : "endIndex",
            "key.namelength" : 8,
            "key.nameoffset" : 2293,
            "key.offset" : 2289,
            "key.overrides" : [
              {
                "key.usr" : "s:Sl8endIndex0B0Qzvp"
              }
            ],
            "key.parsed_declaration" : "public var endIndex: Index",
            "key.parsed_scope.end" : 81,
            "key.parsed_scope.start" : 79,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:3PwZ14ReferenceArrayC8endIndexSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public subscript(position: <Type usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:3PwZ14ReferenceArrayC8Iteratora\">Iterator<\/Type>.<Type usr=\"s:s11AnyIteratorV7Elementa\">Element<\/Type> { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2511
              }
            ],
            "key.bodylength" : 150,
            "key.bodyoffset" : 2566,
            "key.doc.column" : 12,
            "key.doc.comment" : "`ReferenceArray`s can be accessed by subscript, e.g.:\n\n    let ref: ReferenceArray<Int> = [1, 2, 3]\n    let firstValue = ref[0]",
            "key.doc.declaration" : "public subscript(position: Index) -> Iterator.Element { get }",
            "key.doc.discussion" : [
              {
                "CodeListing" : ""
              }
            ],
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"89\" column=\"12\"><Name>subscript(_:)<\/Name><USR>s:3PwZ14ReferenceArrayCyxSicip<\/USR><Declaration>public subscript(position: Index) -&gt; Iterator.Element { get }<\/Declaration><CommentParts><Abstract><Para><codeVoice>ReferenceArray<\/codeVoice>s can be accessed by subscript, e.g.:<\/Para><\/Abstract><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let ref: ReferenceArray<Int> = [1, 2, 3]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let firstValue = ref[0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Other>",
            "key.doc.line" : 89,
            "key.doc.name" : "subscript(_:)",
            "key.doc.type" : "Other",
            "key.doclength" : 154,
            "key.docoffset" : 2352,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.subscript><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>subscript<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.name>position<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:3PwZ14ReferenceArrayC8Iteratora\">Iterator<\/ref.typealias>.<ref.typealias usr=\"s:s11AnyIteratorV7Elementa\">Element<\/ref.typealias><\/decl.function.returntype> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.function.subscript>",
            "key.kind" : "source.lang.swift.decl.function.subscript",
            "key.length" : 199,
            "key.name" : "subscript(_:)",
            "key.namelength" : 26,
            "key.nameoffset" : 2518,
            "key.offset" : 2518,
            "key.overrides" : [
              {
                "key.usr" : "s:Sly7ElementQz5IndexQzcip"
              }
            ],
            "key.parsed_declaration" : "public subscript(position: Index) -> Iterator.Element",
            "key.parsed_scope.end" : 93,
            "key.parsed_scope.start" : 89,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : Equatable> (Int) -> Element",
            "key.typeusr" : "$syxSicD",
            "key.usr" : "s:3PwZ14ReferenceArrayCyxSicip"
          },
          {
            "key.annotated_decl" : "<Declaration>let element: Element<\/Declaration>",
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>element<\/decl.name>: <decl.var.type>Element<\/decl.var.type><\/decl.var.local>",
            "key.kind" : "source.lang.swift.decl.var.local",
            "key.length" : 29,
            "key.name" : "element",
            "key.namelength" : 7,
            "key.nameoffset" : 2663,
            "key.offset" : 2659,
            "key.parsed_declaration" : "let element = items[position]",
            "key.parsed_scope.end" : 91,
            "key.parsed_scope.start" : 91,
            "key.typename" : "Element",
            "key.typeusr" : "$sxD",
            "key.usr" : "s:3PwZ14ReferenceArrayCyxSicig7elementL_xvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func index(after i: <Type usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/Type>) -&gt; <Type usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2785
              }
            ],
            "key.bodylength" : 26,
            "key.bodyoffset" : 2829,
            "key.doc.column" : 17,
            "key.doc.comment" : "Produces the index immediately after the given index.",
            "key.doc.declaration" : "public func index(after i: Index) -> Index",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"96\" column=\"17\"><Name>index(after:)<\/Name><USR>s:3PwZ14ReferenceArrayC5index5afterS2i_tF<\/USR><Declaration>public func index(after i: Index) -&gt; Index<\/Declaration><CommentParts><Abstract><Para>Produces the index immediately after the given index.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 96,
            "key.doc.name" : "index(after:)",
            "key.doc.type" : "Function",
            "key.doclength" : 58,
            "key.docoffset" : 2723,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>index<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>after<\/decl.var.parameter.argument_label> <decl.var.parameter.name>i<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:3PwZ14ReferenceArrayC5Indexa\">Index<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 64,
            "key.name" : "index(after:)",
            "key.namelength" : 21,
            "key.nameoffset" : 2797,
            "key.offset" : 2792,
            "key.overrides" : [
              {
                "key.usr" : "s:Sl5index5after5IndexQzAD_tF"
              }
            ],
            "key.parsed_declaration" : "public func index(after i: Index) -> Index",
            "key.parsed_scope.end" : 98,
            "key.parsed_scope.start" : 96,
            "key.substructure" : [

            ],
            "key.typename" : "<Element where Element : Equatable> (ReferenceArray<Element>) -> (Int) -> Int",
            "key.typeusr" : "$s5afterS2i_tcD",
            "key.usr" : "s:3PwZ14ReferenceArrayC5index5afterS2i_tF"
          }
        ],
        "key.typename" : "ReferenceArray<Element>.Type",
        "key.typeusr" : "$s3PwZ14ReferenceArrayCyxGmD",
        "key.usr" : "s:3PwZ14ReferenceArrayC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.internal",
        "key.annotated_decl" : "<Declaration>public class ReferenceArray&lt;Element&gt; : <Type usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/Type> where Element : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.bodylength" : 259,
        "key.bodyoffset" : 2922,
        "key.doc.column" : 14,
        "key.doc.declaration" : "public class ReferenceArray<Element> : ExpressibleByArrayLiteral where Element : Equatable",
        "key.doc.discussion" : [
          {
            "Para" : "Only the necessary methods are implemented."
          }
        ],
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"7\" column=\"14\"><Name>ReferenceArray<\/Name><USR>s:3PwZ14ReferenceArrayC<\/USR><Declaration>public class ReferenceArray&lt;Element&gt; : ExpressibleByArrayLiteral where Element : Equatable<\/Declaration><CommentParts><Abstract><Para>The <codeVoice>ReferenceArray<\/codeVoice> is a wrapper around the standard <codeVoice>Array<\/codeVoice> that provides reference semantics for mutable array objects.<\/Para><\/Abstract><Discussion><Para>Only the necessary methods are implemented.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.line" : 7,
        "key.doc.name" : "ReferenceArray",
        "key.doc.type" : "Class",
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 2886
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>ReferenceArray<\/decl.name>&lt;<decl.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\"><decl.generic_type_param.name>Element<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt; : <ref.protocol usr=\"s:s25ExpressibleByArrayLiteralP\">ExpressibleByArrayLiteral<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>Element : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.generic_type_requirement><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 322,
        "key.name" : "ReferenceArray",
        "key.namelength" : 14,
        "key.nameoffset" : 2870,
        "key.offset" : 2860,
        "key.parsed_declaration" : "extension ReferenceArray: Equatable where Element: Equatable",
        "key.parsed_scope.end" : 107,
        "key.parsed_scope.start" : 101,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: <Type usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/Type>&lt;<Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>&gt;, rhs: <Type usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/Type>&lt;<Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>&gt;) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3044
              }
            ],
            "key.bodylength" : 43,
            "key.bodyoffset" : 3136,
            "key.doc.column" : 24,
            "key.doc.comment" : "When the elements of a `ReferenceArray` are `Equatable`, the\n`ReferenceArray` itself is `Equatable`.",
            "key.doc.declaration" : "public static func == (lhs: ReferenceArray<Element>, rhs: ReferenceArray<Element>) -> Bool",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift\" line=\"104\" column=\"24\"><Name>==(_:_:)<\/Name><USR>s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ<\/USR><Declaration>public static func == (lhs: ReferenceArray&lt;Element&gt;, rhs: ReferenceArray&lt;Element&gt;) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>When the elements of a <codeVoice>ReferenceArray<\/codeVoice> are <codeVoice>Equatable<\/codeVoice>, the <codeVoice>ReferenceArray<\/codeVoice> itself is <codeVoice>Equatable<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 104,
            "key.doc.name" : "==(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 113,
            "key.docoffset" : 2927,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/ref.class>&lt;<ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/ref.class>&lt;<ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 129,
            "key.name" : "==(_:_:)",
            "key.namelength" : 63,
            "key.nameoffset" : 3063,
            "key.offset" : 3051,
            "key.overrides" : [
              {
                "key.usr" : "s:SQ2eeoiySbx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func == (lhs: ReferenceArray<Element>, rhs: ReferenceArray<Element>) -> Bool",
            "key.parsed_scope.end" : 106,
            "key.parsed_scope.start" : 104,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ\">== (_: Expression, _: Expression) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ\">== (_: ExpressionCase, _: ExpressionCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ\">== (_: ContextCase, _: ContextCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ\">== (_: MemoizationRecord, _: MemoizationRecord) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbypXpSg_ABtF\">== (_: Any.Type?, _: Any.Type?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_xtSYRzSQ8RawValueRpzlF\">== &lt;T&gt;(_: T, _: T) -&gt; Bool where T : RawRepresentable, T.RawValue : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbyt_yttF\">== (_: (), _: ()) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF\">== &lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Equatable, B : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_t_x_q_q0_ttSQRzSQR_SQR0_r1_lF\">== &lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_t_x_q_q0_q1_ttSQRzSQR_SQR0_SQR1_r2_lF\">== &lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_t_x_q_q0_q1_q2_ttSQRzSQR_SQR0_SQR1_SQR2_r3_lF\">== &lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_ttSQRzSQR_SQR0_SQR1_SQR2_SQR3_r4_lF\">== &lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSQRzlE2eeoiySbSayxG_ABtFZ\">== (_: Array&lt;Element&gt;, _: Array&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10ArraySliceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ArraySlice&lt;Element&gt;, _: ArraySlice&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sb2eeoiyS2b_SbtFZ\">== (_: Bool, _: Bool) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ2eeoiySbSJ_SJtFZ\">== (_: Character, _: Character) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17CodingUserInfoKeyV2eeoiySbAB_ABtFZ\">== (_: CodingUserInfoKey, _: CodingUserInfoKey) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15ContiguousArrayVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ContiguousArray&lt;Element&gt;, _: ContiguousArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SNsSxRzSZ6StrideRpzrlE5IndexO2eeoiySbADyx_G_AFtFZ\">== (_: ClosedRange&lt;Bound&gt;.Index, _: ClosedRange&lt;Bound&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SN2eeoiySbSNyxG_ABtFZ\">== (_: ClosedRange&lt;Bound&gt;, _: ClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13OpaquePointerV2eeoiySbAB_ABtFZ\">== (_: OpaquePointer, _: OpaquePointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD4KeysV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Keys, _: Dictionary&lt;Key, Value&gt;.Keys) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SDsSQR_rlE2eeoiySbSDyxq_G_ABtFZ\">== (_: [Key : Value], _: [Key : Value]) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD5IndexV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15EmptyCollectionV2eeoiySbAByxG_ADtFZ\">== (_: EmptyCollection&lt;Element&gt;, _: EmptyCollection&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SQ2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15FlattenSequenceVsSlRzSl7ElementRpzrlE5IndexV2eeoiySbAFyx_G_AHtFZ\">== (_: FlattenCollection&lt;Base&gt;.Index, _: FlattenCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FloatingPointSignO2eeoiySbAB_ABtFZ\">== (_: FloatingPointSign, _: FloatingPointSign) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27FloatingPointClassificationO2eeoiySbAB_ABtFZ\">== (_: FloatingPointClassification, _: FloatingPointClassification) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s25FloatingPointRoundingRuleO2eeoiySbAB_ABtFZ\">== (_: FloatingPointRoundingRule, _: FloatingPointRoundingRule) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SFsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11AnyHashableV2eeoiySbAB_ABtFZ\">== (_: AnyHashable, _: AnyHashable) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SzsE2eeoiySbx_qd__tSzRd__lFZ\">== &lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2eeoiySbAB_ABtFZ\">== (_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2eeoiySbAB_ABtFZ\">== (_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2eeoiySbAB_ABtFZ\">== (_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2eeoiySbAB_ABtFZ\">== (_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2eeoiySbAB_ABtFZ\">== (_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2eeoiySbAB_ABtFZ\">== (_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2eeoiySbAB_ABtFZ\">== (_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2eeoiySbAB_ABtFZ\">== (_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2eeoiySbSu_SutFZ\">== (_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2eeoiySbSi_SitFZ\">== (_: Int, _: Int) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10AnyKeyPathC2eeoiySbAB_ABtFZ\">== (_: AnyKeyPath, _: AnyKeyPath) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20ManagedBufferPointerV2eeoiySbAByxq_G_ADtFZ\">== (_: ManagedBufferPointer&lt;Header, Element&gt;, _: ManagedBufferPointer&lt;Header, Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV2eeoiySbAD_ADtFZ\">== (_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SO2eeoiySbSO_SOtFZ\">== (_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SqsSQRzlE2eeoiySbxSg_ABtFZ\">== (_: Wrapped?, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbxSg_s26_OptionalNilComparisonTypeVtFZ\">== (_: Wrapped?, _: _OptionalNilComparisonType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbs26_OptionalNilComparisonTypeV_xSgtFZ\">== (_: _OptionalNilComparisonType, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8_PointerPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5NeverO2eeoiySbAB_ABtFZ\">== (_: Never, _: Never) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23LazyPrefixWhileSequenceVsSlRzrlE5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: LazyPrefixWhileCollection&lt;Base&gt;.Index, _: LazyPrefixWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sn2eeoiySbSnyxG_ABtFZ\">== (_: Range&lt;Bound&gt;, _: Range&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6ResultOsSQRzSQR_rlE2eeoiySbAByxq_G_ADtFZ\">== (_: Result&lt;Success, Failure&gt;, _: Result&lt;Success, Failure&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s18ReversedCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: ReversedCollection&lt;Base&gt;.Index, _: ReversedCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh2eeoiySbShyxG_ABtFZ\">== (_: Set&lt;Element&gt;, _: Set&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh5IndexV2eeoiySbAByx_G_ADtFZ\">== (_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SxsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SysE2eeoiySbx_qd__tSyRd__lFZ\">== &lt;RHS&gt;(_: Self, _: RHS) -&gt; Bool where RHS : StringProtocol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS2eeoiySbSS_SStFZ\">== (_: String, _: String) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV2eeoiySbAB_ABtFZ\">== (_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: _UIntBuffer&lt;Element&gt;.Index, _: _UIntBuffer&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO15GeneralCategoryO2eeoiySbAD_ADtFZ\">== (_: Unicode.GeneralCategory, _: Unicode.GeneralCategory) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO23CanonicalCombiningClassV2eeoiySbAD_ADtFZ\">== (_: Unicode.CanonicalCombiningClass, _: Unicode.CanonicalCombiningClass) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO11NumericTypeO2eeoiySbAD_ADtFZ\">== (_: Unicode.NumericType, _: Unicode.NumericType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO5UTF32O2eeoiySbAD_ADtFZ\">== (_: Unicode.UTF32, _: Unicode.UTF32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s21UnicodeDecodingResultO2eeoiySbAB_ABtFZ\">== (_: UnicodeDecodingResult, _: UnicodeDecodingResult) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV2eeoiySbAD_ADtFZ\">== (_: _ValidUTF8Buffer.Index, _: _ValidUTF8Buffer.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Index, _: CollectionDifference&lt;ChangeElement&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV6ChangeOsSQRzlE2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Change, _: CollectionDifference&lt;ChangeElement&gt;.Change) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;, _: CollectionDifference&lt;ChangeElement&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV2eeoiySbAB_ABtFZ\">== (_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6MirrorV12DisplayStyleO2eeoiySbAD_ADtFZ\">== (_: Mirror.DisplayStyle, _: Mirror.DisplayStyle) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/Type>&lt;<Type usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/Type>&gt;<\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/ReferenceArray.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/ref.class>&lt;<ref.generic_type_param usr=\"s:3PwZ14ReferenceArrayC7Elementxmfp\">Element<\/ref.generic_type_param>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 3067,
                "key.parent_loc" : 3063,
                "key.parsed_declaration" : "public static func == (lhs",
                "key.parsed_scope.end" : 104,
                "key.parsed_scope.start" : 104,
                "key.typename" : "ReferenceArray<Element>",
                "key.typeusr" : "$s3PwZ14ReferenceArrayCyxGD",
                "key.usr" : "s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ3lhsL_AEvp"
              }
            ],
            "key.typename" : "<Element where Element : Equatable> (ReferenceArray<Element>.Type) -> (ReferenceArray<Element>, ReferenceArray<Element>) -> Bool",
            "key.typeusr" : "$sySb3PwZ14ReferenceArrayCyxG_ADtcD",
            "key.usr" : "s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ"
          }
        ],
        "key.typename" : "ReferenceArray<Element>.Type",
        "key.typeusr" : "$s3PwZ14ReferenceArrayCyxGmD",
        "key.usr" : "s:3PwZ14ReferenceArrayC"
      }
    ]
  }
}, {
  "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 2632,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public struct SentinelStruct<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 198
          }
        ],
        "key.bodylength" : 1853,
        "key.bodyoffset" : 228,
        "key.doc.column" : 15,
        "key.doc.comment" : "The SentinelStruct exists only to produce a singleton from which sentinel\nvalues for various parsing-related types can be drawn. See the documentation\nfor the `Sentinel` singleton value.",
        "key.doc.declaration" : "public struct SentinelStruct",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift\" line=\"6\" column=\"15\"><Name>SentinelStruct<\/Name><USR>s:3PwZ14SentinelStructV<\/USR><Declaration>public struct SentinelStruct<\/Declaration><CommentParts><Abstract><Para>The SentinelStruct exists only to produce a singleton from which sentinel values for various parsing-related types can be drawn. See the documentation for the <codeVoice>Sentinel<\/codeVoice> singleton value.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 6,
        "key.doc.name" : "SentinelStruct",
        "key.doc.type" : "Class",
        "key.doclength" : 197,
        "key.docoffset" : 0,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>SentinelStruct<\/decl.name><\/decl.struct>",
        "key.kind" : "source.lang.swift.decl.struct",
        "key.length" : 1877,
        "key.name" : "SentinelStruct",
        "key.namelength" : 14,
        "key.nameoffset" : 212,
        "key.offset" : 205,
        "key.parsed_declaration" : "public struct SentinelStruct",
        "key.parsed_scope.end" : 45,
        "key.parsed_scope.start" : 6,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let integer: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 233
              }
            ],
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>integer<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 21,
            "key.name" : "integer",
            "key.namelength" : 7,
            "key.nameoffset" : 249,
            "key.offset" : 245,
            "key.parsed_declaration" : "fileprivate let integer: Int = -1",
            "key.parsed_scope.end" : 7,
            "key.parsed_scope.start" : 7,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:3PwZ14SentinelStructV7integer33_0C360417EE50CB15238E067957B37AE9LLSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let symbol: <Type usr=\"s:3PwZ6Symbola\">Symbol<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 318
              }
            ],
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>symbol<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ6Symbola\">Symbol<\/ref.typealias><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 33,
            "key.name" : "symbol",
            "key.namelength" : 6,
            "key.nameoffset" : 334,
            "key.offset" : 330,
            "key.parsed_declaration" : "fileprivate let symbol: Symbol = \"<s_bottom>\"",
            "key.parsed_scope.end" : 8,
            "key.parsed_scope.start" : 8,
            "key.typename" : "String",
            "key.typeusr" : "$sSSD",
            "key.usr" : "s:3PwZ14SentinelStructV6symbol33_0C360417EE50CB15238E067957B37AE9LLSSvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let token: <Type usr=\"s:3PwZ5Tokena\">Token<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 368
              }
            ],
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>token<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 16,
            "key.name" : "token",
            "key.namelength" : 5,
            "key.nameoffset" : 384,
            "key.offset" : 380,
            "key.parsed_declaration" : "fileprivate let token: Token",
            "key.parsed_scope.end" : 9,
            "key.parsed_scope.start" : 9,
            "key.typename" : "(tag: Int, symbol: String)",
            "key.typeusr" : "$sSi3tag_SS6symboltD",
            "key.usr" : "s:3PwZ14SentinelStructV5token33_0C360417EE50CB15238E067957B37AE9LLSi3tag_SS6symboltvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let expression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 770
              }
            ],
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>expression<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 26,
            "key.name" : "expression",
            "key.namelength" : 10,
            "key.nameoffset" : 786,
            "key.offset" : 782,
            "key.parsed_declaration" : "fileprivate let expression: Expression",
            "key.parsed_scope.end" : 17,
            "key.parsed_scope.start" : 17,
            "key.typename" : "Expression",
            "key.typeusr" : "$s3PwZ10ExpressionCD",
            "key.usr" : "s:3PwZ14SentinelStructV10expression33_0C360417EE50CB15238E067957B37AE9LLAA10ExpressionCvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate let memoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 813
              }
            ],
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>memoizationRecord<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 40,
            "key.name" : "memoizationRecord",
            "key.namelength" : 17,
            "key.nameoffset" : 829,
            "key.offset" : 825,
            "key.parsed_declaration" : "fileprivate let memoizationRecord: MemoizationRecord",
            "key.parsed_scope.end" : 18,
            "key.parsed_scope.start" : 18,
            "key.typename" : "MemoizationRecord",
            "key.typeusr" : "$s3PwZ17MemoizationRecordCD",
            "key.usr" : "s:3PwZ14SentinelStructV17memoizationRecord33_0C360417EE50CB15238E067957B37AE9LLAA011MemoizationE0Cvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.fileprivate",
            "key.annotated_decl" : "<Declaration>fileprivate init()<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.fileprivate",
                "key.length" : 11,
                "key.offset" : 871
              }
            ],
            "key.bodylength" : 577,
            "key.bodyoffset" : 891,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>fileprivate<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>()<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 586,
            "key.name" : "init()",
            "key.namelength" : 6,
            "key.nameoffset" : 883,
            "key.offset" : 883,
            "key.parsed_declaration" : "fileprivate init()",
            "key.parsed_scope.end" : 29,
            "key.parsed_scope.start" : 20,
            "key.substructure" : [

            ],
            "key.typename" : "(SentinelStruct.Type) -> () -> SentinelStruct",
            "key.typeusr" : "$s3PwZ14SentinelStructVycD",
            "key.usr" : "s:3PwZ14SentinelStructVACyc33_0C360417EE50CB15238E067957B37AE9Llfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func of(_: <Type usr=\"s:Si\">Int<\/Type>.Type) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1521
              }
            ],
            "key.bodylength" : 21,
            "key.bodyoffset" : 1557,
            "key.doc.column" : 17,
            "key.doc.comment" : "Create a sentinel for any `Int` type.",
            "key.doc.declaration" : "public func of(_: Int.Type) -> Int",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift\" line=\"32\" column=\"17\"><Name>of(_:)<\/Name><USR>s:3PwZ14SentinelStructV2ofyS2imF<\/USR><Declaration>public func of(_: Int.Type) -&gt; Int<\/Declaration><CommentParts><Abstract><Para>Create a sentinel for any <codeVoice>Int<\/codeVoice> type.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 32,
            "key.doc.name" : "of(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 42,
            "key.docoffset" : 1475,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>of<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 51,
            "key.name" : "of(_:)",
            "key.namelength" : 15,
            "key.nameoffset" : 1533,
            "key.offset" : 1528,
            "key.parsed_declaration" : "public func of(_: Int.Type) -> Int",
            "key.parsed_scope.end" : 32,
            "key.parsed_scope.start" : 32,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2SmF\">of(_: Symbol.Type) -&gt; Symbol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofySi3tag_SS6symboltSiAE_SSAFtmF\">of(_: Token.Type) -&gt; Token<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA10ExpressionCAFmF\">of(_: Expression.Type) -&gt; Expression<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA17MemoizationRecordCAFmF\">of(_: MemoizationRecord.Type) -&gt; MemoizationRecord<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(SentinelStruct) -> (Int.Type) -> Int",
            "key.typeusr" : "$syS2imcD",
            "key.usr" : "s:3PwZ14SentinelStructV2ofyS2imF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func of(_: <Type usr=\"s:3PwZ6Symbola\">Symbol<\/Type>.Type) -&gt; <Type usr=\"s:3PwZ6Symbola\">Symbol<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1627
              }
            ],
            "key.bodylength" : 20,
            "key.bodyoffset" : 1669,
            "key.doc.column" : 17,
            "key.doc.comment" : "Create a sentinel for a `Symbol`.",
            "key.doc.declaration" : "public func of(_: Symbol.Type) -> Symbol",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift\" line=\"35\" column=\"17\"><Name>of(_:)<\/Name><USR>s:3PwZ14SentinelStructV2ofyS2SmF<\/USR><Declaration>public func of(_: Symbol.Type) -&gt; Symbol<\/Declaration><CommentParts><Abstract><Para>Create a sentinel for a <codeVoice>Symbol<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 35,
            "key.doc.name" : "of(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 38,
            "key.docoffset" : 1585,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>of<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ6Symbola\">Symbol<\/ref.typealias>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:3PwZ6Symbola\">Symbol<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 56,
            "key.name" : "of(_:)",
            "key.namelength" : 18,
            "key.nameoffset" : 1639,
            "key.offset" : 1634,
            "key.parsed_declaration" : "public func of(_: Symbol.Type) -> Symbol",
            "key.parsed_scope.end" : 35,
            "key.parsed_scope.start" : 35,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2imF\">of(_: Int.Type) -&gt; Int<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofySi3tag_SS6symboltSiAE_SSAFtmF\">of(_: Token.Type) -&gt; Token<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA10ExpressionCAFmF\">of(_: Expression.Type) -&gt; Expression<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA17MemoizationRecordCAFmF\">of(_: MemoizationRecord.Type) -&gt; MemoizationRecord<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(SentinelStruct) -> (String.Type) -> String",
            "key.typeusr" : "$syS2SmcD",
            "key.usr" : "s:3PwZ14SentinelStructV2ofyS2SmF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func of(_: <Type usr=\"s:3PwZ5Tokena\">Token<\/Type>.Type) -&gt; <Type usr=\"s:3PwZ5Tokena\">Token<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1737
              }
            ],
            "key.bodylength" : 19,
            "key.bodyoffset" : 1777,
            "key.doc.column" : 17,
            "key.doc.comment" : "Create a sentinel for a `Token`.",
            "key.doc.declaration" : "public func of(_: Token.Type) -> Token",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift\" line=\"38\" column=\"17\"><Name>of(_:)<\/Name><USR>s:3PwZ14SentinelStructV2ofySi3tag_SS6symboltSiAE_SSAFtmF<\/USR><Declaration>public func of(_: Token.Type) -&gt; Token<\/Declaration><CommentParts><Abstract><Para>Create a sentinel for a <codeVoice>Token<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 38,
            "key.doc.name" : "of(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 37,
            "key.docoffset" : 1696,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>of<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 53,
            "key.name" : "of(_:)",
            "key.namelength" : 17,
            "key.nameoffset" : 1749,
            "key.offset" : 1744,
            "key.parsed_declaration" : "public func of(_: Token.Type) -> Token",
            "key.parsed_scope.end" : 38,
            "key.parsed_scope.start" : 38,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2imF\">of(_: Int.Type) -&gt; Int<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2SmF\">of(_: Symbol.Type) -&gt; Symbol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA10ExpressionCAFmF\">of(_: Expression.Type) -&gt; Expression<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA17MemoizationRecordCAFmF\">of(_: MemoizationRecord.Type) -&gt; MemoizationRecord<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(SentinelStruct) -> ((tag: Int, symbol: String).Type) -> (tag: Int, symbol: String)",
            "key.typeusr" : "$sySi3tag_SS6symboltSiAA_SSABtmcD",
            "key.usr" : "s:3PwZ14SentinelStructV2ofySi3tag_SS6symboltSiAE_SSAFtmF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func of(_: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>.Type) -&gt; <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1850
              }
            ],
            "key.bodylength" : 24,
            "key.bodyoffset" : 1900,
            "key.doc.column" : 17,
            "key.doc.comment" : "Create a sentinel for an `Expression`.",
            "key.doc.declaration" : "public func of(_: Expression.Type) -> Expression",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift\" line=\"41\" column=\"17\"><Name>of(_:)<\/Name><USR>s:3PwZ14SentinelStructV2ofyAA10ExpressionCAFmF<\/USR><Declaration>public func of(_: Expression.Type) -&gt; Expression<\/Declaration><CommentParts><Abstract><Para>Create a sentinel for an <codeVoice>Expression<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 41,
            "key.doc.name" : "of(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 43,
            "key.docoffset" : 1803,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>of<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 68,
            "key.name" : "of(_:)",
            "key.namelength" : 22,
            "key.nameoffset" : 1862,
            "key.offset" : 1857,
            "key.parsed_declaration" : "public func of(_: Expression.Type) -> Expression",
            "key.parsed_scope.end" : 41,
            "key.parsed_scope.start" : 41,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2imF\">of(_: Int.Type) -&gt; Int<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2SmF\">of(_: Symbol.Type) -&gt; Symbol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofySi3tag_SS6symboltSiAE_SSAFtmF\">of(_: Token.Type) -&gt; Token<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA17MemoizationRecordCAFmF\">of(_: MemoizationRecord.Type) -&gt; MemoizationRecord<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(SentinelStruct) -> (Expression.Type) -> Expression",
            "key.typeusr" : "$sy3PwZ10ExpressionCACmcD",
            "key.usr" : "s:3PwZ14SentinelStructV2ofyAA10ExpressionCAFmF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func of(_: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>.Type) -&gt; <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1984
              }
            ],
            "key.bodylength" : 31,
            "key.bodyoffset" : 2048,
            "key.doc.column" : 17,
            "key.doc.comment" : "Create a sentinel for a `MemoizationRecord`.",
            "key.doc.declaration" : "public func of(_: MemoizationRecord.Type) -> MemoizationRecord",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift\" line=\"44\" column=\"17\"><Name>of(_:)<\/Name><USR>s:3PwZ14SentinelStructV2ofyAA17MemoizationRecordCAFmF<\/USR><Declaration>public func of(_: MemoizationRecord.Type) -&gt; MemoizationRecord<\/Declaration><CommentParts><Abstract><Para>Create a sentinel for a <codeVoice>MemoizationRecord<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 44,
            "key.doc.name" : "of(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 49,
            "key.docoffset" : 1931,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>of<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class>.Type<\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 89,
            "key.name" : "of(_:)",
            "key.namelength" : 29,
            "key.nameoffset" : 1996,
            "key.offset" : 1991,
            "key.parsed_declaration" : "public func of(_: MemoizationRecord.Type) -> MemoizationRecord",
            "key.parsed_scope.end" : 44,
            "key.parsed_scope.start" : 44,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2imF\">of(_: Int.Type) -&gt; Int<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyS2SmF\">of(_: Symbol.Type) -&gt; Symbol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofySi3tag_SS6symboltSiAE_SSAFtmF\">of(_: Token.Type) -&gt; Token<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14SentinelStructV2ofyAA10ExpressionCAFmF\">of(_: Expression.Type) -&gt; Expression<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "(SentinelStruct) -> (MemoizationRecord.Type) -> MemoizationRecord",
            "key.typeusr" : "$sy3PwZ17MemoizationRecordCACmcD",
            "key.usr" : "s:3PwZ14SentinelStructV2ofyAA17MemoizationRecordCAFmF"
          }
        ],
        "key.typename" : "SentinelStruct.Type",
        "key.typeusr" : "$s3PwZ14SentinelStructVmD",
        "key.usr" : "s:3PwZ14SentinelStructV"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public let Sentinel: <Type usr=\"s:3PwZ14SentinelStructV\">SentinelStruct<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 2593
          }
        ],
        "key.doc.column" : 12,
        "key.doc.comment" : "The Sentinel singleton allows for using the sentinel values of any of the\nparsing-related types. To use it, you call the `of` method with the desired\ntype as an argument. For example, to get the sentinel for `Expression`s, do:\n\n    Sentinel.of(Expression.self)\n\nNote the use of `.self` on the type, which passes the type as a value directly.\nThe `Sentinel.of` method supports the following types:\n\n  - `Position`\n  - `Symbol`\n  - `Tag`\n  - `Token`\n  - `Expression`\n  - `MemoizationRecord`",
        "key.doc.declaration" : "public let Sentinel: PwZ.SentinelStruct",
        "key.doc.discussion" : [
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Note the use of `.self` on the type, which passes the type as a value directly. The `Sentinel.of` method supports the following types:"
          },
          {
            "List-Bullet" : ""
          }
        ],
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift\" line=\"64\" column=\"12\"><Name>Sentinel<\/Name><USR>s:3PwZ8SentinelAA0B6StructVvp<\/USR><Declaration>public let Sentinel: PwZ.SentinelStruct<\/Declaration><CommentParts><Abstract><Para>The Sentinel singleton allows for using the sentinel values of any of the parsing-related types. To use it, you call the <codeVoice>of<\/codeVoice> method with the desired type as an argument. For example, to get the sentinel for <codeVoice>Expression<\/codeVoice>s, do:<\/Para><\/Abstract><Discussion><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[Sentinel.of(Expression.self)]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Note the use of <codeVoice>.self<\/codeVoice> on the type, which passes the type as a value directly. The <codeVoice>Sentinel.of<\/codeVoice> method supports the following types:<\/Para><List-Bullet><Item><Para><codeVoice>Position<\/codeVoice><\/Para><\/Item><Item><Para><codeVoice>Symbol<\/codeVoice><\/Para><\/Item><Item><Para><codeVoice>Tag<\/codeVoice><\/Para><\/Item><Item><Para><codeVoice>Token<\/codeVoice><\/Para><\/Item><Item><Para><codeVoice>Expression<\/codeVoice><\/Para><\/Item><Item><Para><codeVoice>MemoizationRecord<\/codeVoice><\/Para><\/Item><\/List-Bullet><\/Discussion><\/CommentParts><\/Other>",
        "key.doc.line" : 64,
        "key.doc.name" : "Sentinel",
        "key.doc.type" : "Other",
        "key.doclength" : 508,
        "key.docoffset" : 2084,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Sentinels.swift",
        "key.fully_annotated_decl" : "<decl.var.global><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>Sentinel<\/decl.name>: <decl.var.type><ref.struct usr=\"s:3PwZ14SentinelStructV\">SentinelStruct<\/ref.struct><\/decl.var.type><\/decl.var.global>",
        "key.kind" : "source.lang.swift.decl.var.global",
        "key.length" : 31,
        "key.name" : "Sentinel",
        "key.namelength" : 8,
        "key.nameoffset" : 2604,
        "key.offset" : 2600,
        "key.parsed_declaration" : "public let Sentinel = SentinelStruct()",
        "key.parsed_scope.end" : 64,
        "key.parsed_scope.start" : 64,
        "key.typename" : "SentinelStruct",
        "key.typeusr" : "$s3PwZ14SentinelStructVD",
        "key.usr" : "s:3PwZ8SentinelAA0B6StructVvp"
      }
    ]
  }
}, {
  "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 6180,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public typealias Position = <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 141
          }
        ],
        "key.doc.column" : 18,
        "key.doc.comment" : "Positions are the indices of tokens within the input string being parsed.",
        "key.doc.declaration" : "public typealias Position = Int",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"7\" column=\"18\"><Name>Position<\/Name><USR>s:3PwZ8Positiona<\/USR><Declaration>public typealias Position = Int<\/Declaration><CommentParts><Abstract><Para>Positions are the indices of tokens within the input string being parsed.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 7,
        "key.doc.name" : "Position",
        "key.doc.type" : "Other",
        "key.doclength" : 78,
        "key.docoffset" : 63,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Position<\/decl.name> = <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.typealias>",
        "key.kind" : "source.lang.swift.decl.typealias",
        "key.length" : 24,
        "key.name" : "Position",
        "key.namelength" : 8,
        "key.nameoffset" : 158,
        "key.offset" : 148,
        "key.parsed_declaration" : "public typealias Position = Int",
        "key.parsed_scope.end" : 7,
        "key.parsed_scope.start" : 7,
        "key.typename" : "Int.Type",
        "key.typeusr" : "$sSimD",
        "key.usr" : "s:3PwZ8Positiona"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public typealias Symbol = <Type usr=\"s:SS\">String<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 237
          }
        ],
        "key.doc.column" : 18,
        "key.doc.comment" : "Symbols are the names given to productions with a grammar.",
        "key.doc.declaration" : "public typealias Symbol = String",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"10\" column=\"18\"><Name>Symbol<\/Name><USR>s:3PwZ6Symbola<\/USR><Declaration>public typealias Symbol = String<\/Declaration><CommentParts><Abstract><Para>Symbols are the names given to productions with a grammar.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 10,
        "key.doc.name" : "Symbol",
        "key.doc.type" : "Other",
        "key.doclength" : 63,
        "key.docoffset" : 174,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Symbol<\/decl.name> = <ref.struct usr=\"s:SS\">String<\/ref.struct><\/decl.typealias>",
        "key.kind" : "source.lang.swift.decl.typealias",
        "key.length" : 25,
        "key.name" : "Symbol",
        "key.namelength" : 6,
        "key.nameoffset" : 254,
        "key.offset" : 244,
        "key.parsed_declaration" : "public typealias Symbol = String",
        "key.parsed_scope.end" : 10,
        "key.parsed_scope.start" : 10,
        "key.typename" : "String.Type",
        "key.typeusr" : "$sSSmD",
        "key.usr" : "s:3PwZ6Symbola"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public typealias Tag = <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 311
          }
        ],
        "key.doc.column" : 18,
        "key.doc.comment" : "Tags uniquely identify token types.",
        "key.doc.declaration" : "public typealias Tag = Int",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"13\" column=\"18\"><Name>Tag<\/Name><USR>s:3PwZ3Taga<\/USR><Declaration>public typealias Tag = Int<\/Declaration><CommentParts><Abstract><Para>Tags uniquely identify token types.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 13,
        "key.doc.name" : "Tag",
        "key.doc.type" : "Other",
        "key.doclength" : 40,
        "key.docoffset" : 271,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Tag<\/decl.name> = <ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.typealias>",
        "key.kind" : "source.lang.swift.decl.typealias",
        "key.length" : 19,
        "key.name" : "Tag",
        "key.namelength" : 3,
        "key.nameoffset" : 328,
        "key.offset" : 318,
        "key.parsed_declaration" : "public typealias Tag = Int",
        "key.parsed_scope.end" : 13,
        "key.parsed_scope.start" : 13,
        "key.typename" : "Int.Type",
        "key.typeusr" : "$sSimD",
        "key.usr" : "s:3PwZ3Taga"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public typealias Token = (tag: <Type usr=\"s:3PwZ3Taga\">Tag<\/Type>, symbol: <Type usr=\"s:3PwZ6Symbola\">Symbol<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 462
          }
        ],
        "key.doc.column" : 18,
        "key.doc.comment" : "Tokens are pairs consisting of a tag (identifying the type of the token) and\na symbol (identify the token's text).",
        "key.doc.declaration" : "public typealias Token = (tag: Tag, symbol: Symbol)",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"17\" column=\"18\"><Name>Token<\/Name><USR>s:3PwZ5Tokena<\/USR><Declaration>public typealias Token = (tag: Tag, symbol: Symbol)<\/Declaration><CommentParts><Abstract><Para>Tokens are pairs consisting of a tag (identifying the type of the token) and a symbol (identify the token’s text).<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 17,
        "key.doc.name" : "Token",
        "key.doc.type" : "Other",
        "key.doclength" : 123,
        "key.docoffset" : 339,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Token<\/decl.name> = <tuple>(<tuple.element><tuple.element.argument_label>tag<\/tuple.element.argument_label>: <tuple.element.type><ref.typealias usr=\"s:3PwZ3Taga\">Tag<\/ref.typealias><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.argument_label>symbol<\/tuple.element.argument_label>: <tuple.element.type><ref.typealias usr=\"s:3PwZ6Symbola\">Symbol<\/ref.typealias><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.typealias>",
        "key.kind" : "source.lang.swift.decl.typealias",
        "key.length" : 44,
        "key.name" : "Token",
        "key.namelength" : 5,
        "key.nameoffset" : 479,
        "key.offset" : 469,
        "key.parsed_declaration" : "public typealias Token = (tag: Tag, symbol: Symbol)",
        "key.parsed_scope.end" : 17,
        "key.parsed_scope.start" : 17,
        "key.typename" : "(tag: Int, symbol: String).Type",
        "key.typeusr" : "$sSi3tag_SS6symboltmD",
        "key.usr" : "s:3PwZ5Tokena"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public class Expression : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 779
          }
        ],
        "key.bodylength" : 814,
        "key.bodyoffset" : 815,
        "key.doc.column" : 14,
        "key.doc.comment" : "Expressions form trees in a grammar. We use a class instead of a struct to\npreserve reference semantics because grammars may have duplicate references to\nthe same expression multiple times.",
        "key.doc.declaration" : "public class Expression : Equatable",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"30\" column=\"14\"><Name>Expression<\/Name><USR>s:3PwZ10ExpressionC<\/USR><Declaration>public class Expression : Equatable<\/Declaration><CommentParts><Abstract><Para>Expressions form trees in a grammar. We use a class instead of a struct to preserve reference semantics because grammars may have duplicate references to the same expression multiple times.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 30,
        "key.doc.name" : "Expression",
        "key.doc.type" : "Class",
        "key.doclength" : 200,
        "key.docoffset" : 578,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 804
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>Expression<\/decl.name> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 844,
        "key.name" : "Expression",
        "key.namelength" : 10,
        "key.nameoffset" : 792,
        "key.offset" : 786,
        "key.parsed_declaration" : "public class Expression: Equatable",
        "key.parsed_scope.end" : 50,
        "key.parsed_scope.start" : 30,
        "key.runtime_name" : "_TtC4main10Expression",
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var memoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type><\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "Memoization records are pushed into expressions for efficiency.",
            "key.doc.declaration" : "var memoizationRecord: MemoizationRecord",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"32\" column=\"9\"><Name>memoizationRecord<\/Name><USR>s:3PwZ10ExpressionC17memoizationRecordAA011MemoizationD0Cvp<\/USR><Declaration>var memoizationRecord: MemoizationRecord<\/Declaration><CommentParts><Abstract><Para>Memoization records are pushed into expressions for efficiency.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 32,
            "key.doc.name" : "memoizationRecord",
            "key.doc.type" : "Other",
            "key.doclength" : 68,
            "key.docoffset" : 820,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>memoizationRecord<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 40,
            "key.name" : "memoizationRecord",
            "key.namelength" : 17,
            "key.nameoffset" : 896,
            "key.offset" : 892,
            "key.parsed_declaration" : "var memoizationRecord: MemoizationRecord",
            "key.parsed_scope.end" : 32,
            "key.parsed_scope.start" : 32,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.typename" : "MemoizationRecord",
            "key.typeusr" : "$s3PwZ17MemoizationRecordCD",
            "key.usr" : "s:3PwZ10ExpressionC17memoizationRecordAA011MemoizationD0Cvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let expressionCase: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type><\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "The specific case of expression being represented in this `Expression`.",
            "key.doc.declaration" : "let expressionCase: ExpressionCase",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"34\" column=\"9\"><Name>expressionCase<\/Name><USR>s:3PwZ10ExpressionC14expressionCaseAA0bD0Ovp<\/USR><Declaration>let expressionCase: ExpressionCase<\/Declaration><CommentParts><Abstract><Para>The specific case of expression being represented in this <codeVoice>Expression<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 34,
            "key.doc.name" : "expressionCase",
            "key.doc.type" : "Other",
            "key.doclength" : 76,
            "key.docoffset" : 937,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>expressionCase<\/decl.name>: <decl.var.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 34,
            "key.name" : "expressionCase",
            "key.namelength" : 14,
            "key.nameoffset" : 1021,
            "key.offset" : 1017,
            "key.parsed_declaration" : "let expressionCase: ExpressionCase",
            "key.parsed_scope.end" : 34,
            "key.parsed_scope.start" : 34,
            "key.typename" : "ExpressionCase",
            "key.typeusr" : "$s3PwZ14ExpressionCaseOD",
            "key.usr" : "s:3PwZ10ExpressionC14expressionCaseAA0bD0Ovp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(memoizationRecord memRec: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>, expressionCase expCase: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1162
              }
            ],
            "key.bodylength" : 83,
            "key.bodyoffset" : 1269,
            "key.doc.column" : 12,
            "key.doc.comment" : "Initializes a new `Expression` from a `MemoizationRecord` and internal\n`ExpressionCase`.",
            "key.doc.declaration" : "public init(memoizationRecord memRec: MemoizationRecord, expressionCase expCase: ExpressionCase)",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"38\" column=\"12\"><Name>init(memoizationRecord:expressionCase:)<\/Name><USR>s:3PwZ10ExpressionC17memoizationRecord14expressionCaseAcA011MemoizationD0C_AA0bF0Otcfc<\/USR><Declaration>public init(memoizationRecord memRec: MemoizationRecord, expressionCase expCase: ExpressionCase)<\/Declaration><CommentParts><Abstract><Para>Initializes a new <codeVoice>Expression<\/codeVoice> from a <codeVoice>MemoizationRecord<\/codeVoice> and internal <codeVoice>ExpressionCase<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 38,
            "key.doc.name" : "init(memoizationRecord:expressionCase:)",
            "key.doc.type" : "Function",
            "key.doclength" : 101,
            "key.docoffset" : 1057,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>memoizationRecord<\/decl.var.parameter.argument_label> <decl.var.parameter.name>memRec<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>expressionCase<\/decl.var.parameter.argument_label> <decl.var.parameter.name>expCase<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 184,
            "key.name" : "init(memoizationRecord:expressionCase:)",
            "key.namelength" : 98,
            "key.nameoffset" : 1169,
            "key.offset" : 1169,
            "key.parsed_declaration" : "public init(memoizationRecord memRec: MemoizationRecord,\n     expressionCase expCase: ExpressionCase)",
            "key.parsed_scope.end" : 42,
            "key.parsed_scope.start" : 38,
            "key.substructure" : [

            ],
            "key.typename" : "(Expression.Type) -> (MemoizationRecord, ExpressionCase) -> Expression",
            "key.typeusr" : "$s17memoizationRecord14expressionCase3PwZ10ExpressionCAC011MemoizationB0C_AC0fD0OtcD",
            "key.usr" : "s:3PwZ10ExpressionC17memoizationRecord14expressionCaseAcA011MemoizationD0C_AA0bF0Otcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>, rhs: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1430
              }
            ],
            "key.bodylength" : 131,
            "key.bodyoffset" : 1496,
            "key.doc.column" : 24,
            "key.doc.comment" : "`Expression`s are trivially `Equatable` from their components.",
            "key.doc.declaration" : "public static func == (lhs: Expression, rhs: Expression) -> Bool",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"45\" column=\"24\"><Name>==(_:_:)<\/Name><USR>s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ<\/USR><Declaration>public static func == (lhs: Expression, rhs: Expression) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para><codeVoice>Expression<\/codeVoice>s are trivially <codeVoice>Equatable<\/codeVoice> from their components.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 45,
            "key.doc.name" : "==(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 67,
            "key.docoffset" : 1359,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 191,
            "key.name" : "==(_:_:)",
            "key.namelength" : 37,
            "key.nameoffset" : 1449,
            "key.offset" : 1437,
            "key.overrides" : [
              {
                "key.usr" : "s:SQ2eeoiySbx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func == (lhs: Expression, rhs: Expression) -> Bool",
            "key.parsed_scope.end" : 49,
            "key.parsed_scope.start" : 45,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ\">== (_: ReferenceArray&lt;Element&gt;, _: ReferenceArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ\">== (_: ExpressionCase, _: ExpressionCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ\">== (_: ContextCase, _: ContextCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ\">== (_: MemoizationRecord, _: MemoizationRecord) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbypXpSg_ABtF\">== (_: Any.Type?, _: Any.Type?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_xtSYRzSQ8RawValueRpzlF\">== &lt;T&gt;(_: T, _: T) -&gt; Bool where T : RawRepresentable, T.RawValue : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbyt_yttF\">== (_: (), _: ()) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF\">== &lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Equatable, B : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_t_x_q_q0_ttSQRzSQR_SQR0_r1_lF\">== &lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_t_x_q_q0_q1_ttSQRzSQR_SQR0_SQR1_r2_lF\">== &lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_t_x_q_q0_q1_q2_ttSQRzSQR_SQR0_SQR1_SQR2_r3_lF\">== &lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_ttSQRzSQR_SQR0_SQR1_SQR2_SQR3_r4_lF\">== &lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSQRzlE2eeoiySbSayxG_ABtFZ\">== (_: Array&lt;Element&gt;, _: Array&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10ArraySliceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ArraySlice&lt;Element&gt;, _: ArraySlice&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sb2eeoiyS2b_SbtFZ\">== (_: Bool, _: Bool) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ2eeoiySbSJ_SJtFZ\">== (_: Character, _: Character) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17CodingUserInfoKeyV2eeoiySbAB_ABtFZ\">== (_: CodingUserInfoKey, _: CodingUserInfoKey) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15ContiguousArrayVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ContiguousArray&lt;Element&gt;, _: ContiguousArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SNsSxRzSZ6StrideRpzrlE5IndexO2eeoiySbADyx_G_AFtFZ\">== (_: ClosedRange&lt;Bound&gt;.Index, _: ClosedRange&lt;Bound&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SN2eeoiySbSNyxG_ABtFZ\">== (_: ClosedRange&lt;Bound&gt;, _: ClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13OpaquePointerV2eeoiySbAB_ABtFZ\">== (_: OpaquePointer, _: OpaquePointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD4KeysV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Keys, _: Dictionary&lt;Key, Value&gt;.Keys) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SDsSQR_rlE2eeoiySbSDyxq_G_ABtFZ\">== (_: [Key : Value], _: [Key : Value]) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD5IndexV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15EmptyCollectionV2eeoiySbAByxG_ADtFZ\">== (_: EmptyCollection&lt;Element&gt;, _: EmptyCollection&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SQ2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15FlattenSequenceVsSlRzSl7ElementRpzrlE5IndexV2eeoiySbAFyx_G_AHtFZ\">== (_: FlattenCollection&lt;Base&gt;.Index, _: FlattenCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FloatingPointSignO2eeoiySbAB_ABtFZ\">== (_: FloatingPointSign, _: FloatingPointSign) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27FloatingPointClassificationO2eeoiySbAB_ABtFZ\">== (_: FloatingPointClassification, _: FloatingPointClassification) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s25FloatingPointRoundingRuleO2eeoiySbAB_ABtFZ\">== (_: FloatingPointRoundingRule, _: FloatingPointRoundingRule) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SFsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11AnyHashableV2eeoiySbAB_ABtFZ\">== (_: AnyHashable, _: AnyHashable) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SzsE2eeoiySbx_qd__tSzRd__lFZ\">== &lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2eeoiySbAB_ABtFZ\">== (_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2eeoiySbAB_ABtFZ\">== (_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2eeoiySbAB_ABtFZ\">== (_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2eeoiySbAB_ABtFZ\">== (_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2eeoiySbAB_ABtFZ\">== (_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2eeoiySbAB_ABtFZ\">== (_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2eeoiySbAB_ABtFZ\">== (_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2eeoiySbAB_ABtFZ\">== (_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2eeoiySbSu_SutFZ\">== (_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2eeoiySbSi_SitFZ\">== (_: Int, _: Int) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10AnyKeyPathC2eeoiySbAB_ABtFZ\">== (_: AnyKeyPath, _: AnyKeyPath) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20ManagedBufferPointerV2eeoiySbAByxq_G_ADtFZ\">== (_: ManagedBufferPointer&lt;Header, Element&gt;, _: ManagedBufferPointer&lt;Header, Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV2eeoiySbAD_ADtFZ\">== (_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SO2eeoiySbSO_SOtFZ\">== (_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SqsSQRzlE2eeoiySbxSg_ABtFZ\">== (_: Wrapped?, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbxSg_s26_OptionalNilComparisonTypeVtFZ\">== (_: Wrapped?, _: _OptionalNilComparisonType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbs26_OptionalNilComparisonTypeV_xSgtFZ\">== (_: _OptionalNilComparisonType, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8_PointerPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5NeverO2eeoiySbAB_ABtFZ\">== (_: Never, _: Never) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23LazyPrefixWhileSequenceVsSlRzrlE5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: LazyPrefixWhileCollection&lt;Base&gt;.Index, _: LazyPrefixWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sn2eeoiySbSnyxG_ABtFZ\">== (_: Range&lt;Bound&gt;, _: Range&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6ResultOsSQRzSQR_rlE2eeoiySbAByxq_G_ADtFZ\">== (_: Result&lt;Success, Failure&gt;, _: Result&lt;Success, Failure&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s18ReversedCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: ReversedCollection&lt;Base&gt;.Index, _: ReversedCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh2eeoiySbShyxG_ABtFZ\">== (_: Set&lt;Element&gt;, _: Set&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh5IndexV2eeoiySbAByx_G_ADtFZ\">== (_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SxsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SysE2eeoiySbx_qd__tSyRd__lFZ\">== &lt;RHS&gt;(_: Self, _: RHS) -&gt; Bool where RHS : StringProtocol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS2eeoiySbSS_SStFZ\">== (_: String, _: String) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV2eeoiySbAB_ABtFZ\">== (_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: _UIntBuffer&lt;Element&gt;.Index, _: _UIntBuffer&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO15GeneralCategoryO2eeoiySbAD_ADtFZ\">== (_: Unicode.GeneralCategory, _: Unicode.GeneralCategory) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO23CanonicalCombiningClassV2eeoiySbAD_ADtFZ\">== (_: Unicode.CanonicalCombiningClass, _: Unicode.CanonicalCombiningClass) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO11NumericTypeO2eeoiySbAD_ADtFZ\">== (_: Unicode.NumericType, _: Unicode.NumericType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO5UTF32O2eeoiySbAD_ADtFZ\">== (_: Unicode.UTF32, _: Unicode.UTF32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s21UnicodeDecodingResultO2eeoiySbAB_ABtFZ\">== (_: UnicodeDecodingResult, _: UnicodeDecodingResult) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV2eeoiySbAD_ADtFZ\">== (_: _ValidUTF8Buffer.Index, _: _ValidUTF8Buffer.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Index, _: CollectionDifference&lt;ChangeElement&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV6ChangeOsSQRzlE2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Change, _: CollectionDifference&lt;ChangeElement&gt;.Change) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;, _: CollectionDifference&lt;ChangeElement&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV2eeoiySbAB_ABtFZ\">== (_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6MirrorV12DisplayStyleO2eeoiySbAD_ADtFZ\">== (_: Mirror.DisplayStyle, _: Mirror.DisplayStyle) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 1453,
                "key.parent_loc" : 1449,
                "key.parsed_declaration" : "public static func == (lhs",
                "key.parsed_scope.end" : 45,
                "key.parsed_scope.start" : 45,
                "key.typename" : "Expression",
                "key.typeusr" : "$s3PwZ10ExpressionCD",
                "key.usr" : "s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ3lhsL_ACvp"
              }
            ],
            "key.typename" : "(Expression.Type) -> (Expression, Expression) -> Bool",
            "key.typeusr" : "$sySb3PwZ10ExpressionC_ACtcD",
            "key.usr" : "s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ"
          }
        ],
        "key.typename" : "Expression.Type",
        "key.typeusr" : "$s3PwZ10ExpressionCmD",
        "key.usr" : "s:3PwZ10ExpressionC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public indirect enum ExpressionCase : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.indirect",
            "key.length" : 8,
            "key.offset" : 1720
          },
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 1713
          }
        ],
        "key.bodylength" : 1038,
        "key.bodyoffset" : 1761,
        "key.doc.column" : 22,
        "key.doc.comment" : "ExpressionCases encode the particular type of `Expression` being dealt with.",
        "key.doc.declaration" : "public indirect enum ExpressionCase : Equatable",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"53\" column=\"22\"><Name>ExpressionCase<\/Name><USR>s:3PwZ14ExpressionCaseO<\/USR><Declaration>public indirect enum ExpressionCase : Equatable<\/Declaration><CommentParts><Abstract><Para>ExpressionCases encode the particular type of <codeVoice>Expression<\/codeVoice> being dealt with.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 53,
        "key.doc.name" : "ExpressionCase",
        "key.doc.type" : "Other",
        "key.doclength" : 81,
        "key.docoffset" : 1632,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 1750
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>indirect<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>ExpressionCase<\/decl.name> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 1071,
        "key.name" : "ExpressionCase",
        "key.namelength" : 14,
        "key.nameoffset" : 1734,
        "key.offset" : 1729,
        "key.parsed_declaration" : "public indirect enum ExpressionCase: Equatable",
        "key.parsed_scope.end" : 76,
        "key.parsed_scope.start" : 53,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 22,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1808,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Tok(token: <Type usr=\"s:3PwZ5Tokena\">Token<\/Type>)<\/Declaration>",
                "key.doc.column" : 10,
                "key.doc.comment" : "Tokens are trivial constructions.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"55\" column=\"10\"><Name>Tok(token:)<\/Name><USR>s:3PwZ14ExpressionCaseO3TokyACSi3tag_SS6symbolt_tcACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Tokens are trivial constructions.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 55,
                "key.doc.name" : "Tok(token:)",
                "key.doc.type" : "Other",
                "key.doclength" : 38,
                "key.docoffset" : 1766,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Tok<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>token<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ5Tokena\">Token<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 17,
                "key.name" : "Tok(token:)",
                "key.namelength" : 17,
                "key.nameoffset" : 1813,
                "key.offset" : 1813,
                "key.parsed_declaration" : "case Tok(token: Token)",
                "key.parsed_scope.end" : 55,
                "key.parsed_scope.start" : 55,
                "key.typename" : "(ExpressionCase.Type) -> ((tag: Int, symbol: String)) -> ExpressionCase",
                "key.typeusr" : "$sy3PwZ14ExpressionCaseOSi3tag_SS6symbolt_tcACmcD",
                "key.usr" : "s:3PwZ14ExpressionCaseO3TokyACSi3tag_SS6symbolt_tcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 51,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 1968,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Seq(symbol: <Type usr=\"s:3PwZ6Symbola\">Symbol<\/Type>, expressions: [<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>])<\/Declaration>",
                "key.doc.column" : 10,
                "key.doc.comment" : "Sequences consist of a `Symbol` (naming the production represented by\nthe sequence) and a sequence of `Expression`s.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"58\" column=\"10\"><Name>Seq(symbol:expressions:)<\/Name><USR>s:3PwZ14ExpressionCaseO3SeqyACSS_SayAA0B0CGtcACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Sequences consist of a <codeVoice>Symbol<\/codeVoice> (naming the production represented by the sequence) and a sequence of <codeVoice>Expression<\/codeVoice>s.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 58,
                "key.doc.name" : "Seq(symbol:expressions:)",
                "key.doc.type" : "Other",
                "key.doclength" : 129,
                "key.docoffset" : 1835,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Seq<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>symbol<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ6Symbola\">Symbol<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>expressions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 46,
                "key.name" : "Seq(symbol:expressions:)",
                "key.namelength" : 46,
                "key.nameoffset" : 1973,
                "key.offset" : 1973,
                "key.parsed_declaration" : "case Seq(symbol: Symbol, expressions: [Expression])",
                "key.parsed_scope.end" : 58,
                "key.parsed_scope.start" : 58,
                "key.typename" : "(ExpressionCase.Type) -> (String, [Expression]) -> ExpressionCase",
                "key.typeusr" : "$sy3PwZ14ExpressionCaseOSS_SayAA0B0CGtcACmcD",
                "key.usr" : "s:3PwZ14ExpressionCaseO3SeqyACSS_SayAA0B0CGtcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 49,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 2277,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case Alt(expressions: <Type usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/Type>&lt;<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>&gt;)<\/Declaration>",
                "key.doc.column" : 10,
                "key.doc.comment" : "Alternates are not named. They contain a collection of child `Expression`s.\n\nNOTE: The parsing implementation requires that this array can be updated\n      in-place, so we use a `ReferenceArray` instead of a simple array.",
                "key.doc.declaration" : "",
                "key.doc.discussion" : [
                  {
                    "Para" : "NOTE: The parsing implementation requires that this array can be updated in-place, so we use a `ReferenceArray` instead of a simple array."
                  }
                ],
                "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"65\" column=\"10\"><Name>Alt(expressions:)<\/Name><USR>s:3PwZ14ExpressionCaseO3AltyAcA14ReferenceArrayCyAA0B0CG_tcACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Alternates are not named. They contain a collection of child <codeVoice>Expression<\/codeVoice>s.<\/Para><\/Abstract><Discussion><Para>NOTE: The parsing implementation requires that this array can be updated in-place, so we use a <codeVoice>ReferenceArray<\/codeVoice> instead of a simple array.<\/Para><\/Discussion><\/CommentParts><\/Other>",
                "key.doc.line" : 65,
                "key.doc.name" : "Alt(expressions:)",
                "key.doc.type" : "Other",
                "key.doclength" : 248,
                "key.docoffset" : 2024,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>Alt<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>expressions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ14ReferenceArrayC\">ReferenceArray<\/ref.class>&lt;<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 44,
                "key.name" : "Alt(expressions:)",
                "key.namelength" : 44,
                "key.nameoffset" : 2282,
                "key.offset" : 2282,
                "key.parsed_declaration" : "case Alt(expressions: ReferenceArray<Expression>)",
                "key.parsed_scope.end" : 65,
                "key.parsed_scope.start" : 65,
                "key.typename" : "(ExpressionCase.Type) -> (ReferenceArray<Expression>) -> ExpressionCase",
                "key.typeusr" : "$sy3PwZ14ExpressionCaseOAA14ReferenceArrayCyAA0B0CG_tcACmcD",
                "key.usr" : "s:3PwZ14ExpressionCaseO3AltyAcA14ReferenceArrayCyAA0B0CG_tcACmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type>, rhs: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2407
              }
            ],
            "key.bodylength" : 316,
            "key.bodyoffset" : 2481,
            "key.doc.column" : 24,
            "key.doc.comment" : "`ExpressionCase`s are trivially `Equatable` from their components.",
            "key.doc.declaration" : "public static func == (lhs: ExpressionCase, rhs: ExpressionCase) -> Bool",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"68\" column=\"24\"><Name>==(_:_:)<\/Name><USR>s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ<\/USR><Declaration>public static func == (lhs: ExpressionCase, rhs: ExpressionCase) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para><codeVoice>ExpressionCase<\/codeVoice>s are trivially <codeVoice>Equatable<\/codeVoice> from their components.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 68,
            "key.doc.name" : "==(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 71,
            "key.docoffset" : 2332,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 384,
            "key.name" : "==(_:_:)",
            "key.namelength" : 45,
            "key.nameoffset" : 2426,
            "key.offset" : 2414,
            "key.overrides" : [
              {
                "key.usr" : "s:SQ2eeoiySbx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func == (lhs: ExpressionCase, rhs: ExpressionCase) -> Bool",
            "key.parsed_scope.end" : 75,
            "key.parsed_scope.start" : 68,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ\">== (_: ReferenceArray&lt;Element&gt;, _: ReferenceArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ\">== (_: Expression, _: Expression) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ\">== (_: ContextCase, _: ContextCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ\">== (_: MemoizationRecord, _: MemoizationRecord) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbypXpSg_ABtF\">== (_: Any.Type?, _: Any.Type?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_xtSYRzSQ8RawValueRpzlF\">== &lt;T&gt;(_: T, _: T) -&gt; Bool where T : RawRepresentable, T.RawValue : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbyt_yttF\">== (_: (), _: ()) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF\">== &lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Equatable, B : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_t_x_q_q0_ttSQRzSQR_SQR0_r1_lF\">== &lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_t_x_q_q0_q1_ttSQRzSQR_SQR0_SQR1_r2_lF\">== &lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_t_x_q_q0_q1_q2_ttSQRzSQR_SQR0_SQR1_SQR2_r3_lF\">== &lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_ttSQRzSQR_SQR0_SQR1_SQR2_SQR3_r4_lF\">== &lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSQRzlE2eeoiySbSayxG_ABtFZ\">== (_: Array&lt;Element&gt;, _: Array&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10ArraySliceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ArraySlice&lt;Element&gt;, _: ArraySlice&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sb2eeoiyS2b_SbtFZ\">== (_: Bool, _: Bool) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ2eeoiySbSJ_SJtFZ\">== (_: Character, _: Character) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17CodingUserInfoKeyV2eeoiySbAB_ABtFZ\">== (_: CodingUserInfoKey, _: CodingUserInfoKey) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15ContiguousArrayVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ContiguousArray&lt;Element&gt;, _: ContiguousArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SNsSxRzSZ6StrideRpzrlE5IndexO2eeoiySbADyx_G_AFtFZ\">== (_: ClosedRange&lt;Bound&gt;.Index, _: ClosedRange&lt;Bound&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SN2eeoiySbSNyxG_ABtFZ\">== (_: ClosedRange&lt;Bound&gt;, _: ClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13OpaquePointerV2eeoiySbAB_ABtFZ\">== (_: OpaquePointer, _: OpaquePointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD4KeysV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Keys, _: Dictionary&lt;Key, Value&gt;.Keys) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SDsSQR_rlE2eeoiySbSDyxq_G_ABtFZ\">== (_: [Key : Value], _: [Key : Value]) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD5IndexV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15EmptyCollectionV2eeoiySbAByxG_ADtFZ\">== (_: EmptyCollection&lt;Element&gt;, _: EmptyCollection&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SQ2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15FlattenSequenceVsSlRzSl7ElementRpzrlE5IndexV2eeoiySbAFyx_G_AHtFZ\">== (_: FlattenCollection&lt;Base&gt;.Index, _: FlattenCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FloatingPointSignO2eeoiySbAB_ABtFZ\">== (_: FloatingPointSign, _: FloatingPointSign) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27FloatingPointClassificationO2eeoiySbAB_ABtFZ\">== (_: FloatingPointClassification, _: FloatingPointClassification) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s25FloatingPointRoundingRuleO2eeoiySbAB_ABtFZ\">== (_: FloatingPointRoundingRule, _: FloatingPointRoundingRule) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SFsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11AnyHashableV2eeoiySbAB_ABtFZ\">== (_: AnyHashable, _: AnyHashable) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SzsE2eeoiySbx_qd__tSzRd__lFZ\">== &lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2eeoiySbAB_ABtFZ\">== (_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2eeoiySbAB_ABtFZ\">== (_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2eeoiySbAB_ABtFZ\">== (_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2eeoiySbAB_ABtFZ\">== (_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2eeoiySbAB_ABtFZ\">== (_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2eeoiySbAB_ABtFZ\">== (_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2eeoiySbAB_ABtFZ\">== (_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2eeoiySbAB_ABtFZ\">== (_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2eeoiySbSu_SutFZ\">== (_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2eeoiySbSi_SitFZ\">== (_: Int, _: Int) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10AnyKeyPathC2eeoiySbAB_ABtFZ\">== (_: AnyKeyPath, _: AnyKeyPath) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20ManagedBufferPointerV2eeoiySbAByxq_G_ADtFZ\">== (_: ManagedBufferPointer&lt;Header, Element&gt;, _: ManagedBufferPointer&lt;Header, Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV2eeoiySbAD_ADtFZ\">== (_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SO2eeoiySbSO_SOtFZ\">== (_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SqsSQRzlE2eeoiySbxSg_ABtFZ\">== (_: Wrapped?, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbxSg_s26_OptionalNilComparisonTypeVtFZ\">== (_: Wrapped?, _: _OptionalNilComparisonType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbs26_OptionalNilComparisonTypeV_xSgtFZ\">== (_: _OptionalNilComparisonType, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8_PointerPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5NeverO2eeoiySbAB_ABtFZ\">== (_: Never, _: Never) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23LazyPrefixWhileSequenceVsSlRzrlE5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: LazyPrefixWhileCollection&lt;Base&gt;.Index, _: LazyPrefixWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sn2eeoiySbSnyxG_ABtFZ\">== (_: Range&lt;Bound&gt;, _: Range&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6ResultOsSQRzSQR_rlE2eeoiySbAByxq_G_ADtFZ\">== (_: Result&lt;Success, Failure&gt;, _: Result&lt;Success, Failure&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s18ReversedCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: ReversedCollection&lt;Base&gt;.Index, _: ReversedCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh2eeoiySbShyxG_ABtFZ\">== (_: Set&lt;Element&gt;, _: Set&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh5IndexV2eeoiySbAByx_G_ADtFZ\">== (_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SxsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SysE2eeoiySbx_qd__tSyRd__lFZ\">== &lt;RHS&gt;(_: Self, _: RHS) -&gt; Bool where RHS : StringProtocol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS2eeoiySbSS_SStFZ\">== (_: String, _: String) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV2eeoiySbAB_ABtFZ\">== (_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: _UIntBuffer&lt;Element&gt;.Index, _: _UIntBuffer&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO15GeneralCategoryO2eeoiySbAD_ADtFZ\">== (_: Unicode.GeneralCategory, _: Unicode.GeneralCategory) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO23CanonicalCombiningClassV2eeoiySbAD_ADtFZ\">== (_: Unicode.CanonicalCombiningClass, _: Unicode.CanonicalCombiningClass) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO11NumericTypeO2eeoiySbAD_ADtFZ\">== (_: Unicode.NumericType, _: Unicode.NumericType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO5UTF32O2eeoiySbAD_ADtFZ\">== (_: Unicode.UTF32, _: Unicode.UTF32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s21UnicodeDecodingResultO2eeoiySbAB_ABtFZ\">== (_: UnicodeDecodingResult, _: UnicodeDecodingResult) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV2eeoiySbAD_ADtFZ\">== (_: _ValidUTF8Buffer.Index, _: _ValidUTF8Buffer.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Index, _: CollectionDifference&lt;ChangeElement&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV6ChangeOsSQRzlE2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Change, _: CollectionDifference&lt;ChangeElement&gt;.Change) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;, _: CollectionDifference&lt;ChangeElement&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV2eeoiySbAB_ABtFZ\">== (_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6MirrorV12DisplayStyleO2eeoiySbAD_ADtFZ\">== (_: Mirror.DisplayStyle, _: Mirror.DisplayStyle) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 2430,
                "key.parent_loc" : 2426,
                "key.parsed_declaration" : "public static func == (lhs",
                "key.parsed_scope.end" : 68,
                "key.parsed_scope.start" : 68,
                "key.typename" : "ExpressionCase",
                "key.typeusr" : "$s3PwZ14ExpressionCaseOD",
                "key.usr" : "s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ3lhsL_ACvp"
              }
            ],
            "key.typename" : "(ExpressionCase.Type) -> (ExpressionCase, ExpressionCase) -> Bool",
            "key.typeusr" : "$sySb3PwZ14ExpressionCaseO_ACtcD",
            "key.usr" : "s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ"
          }
        ],
        "key.typename" : "ExpressionCase.Type",
        "key.typeusr" : "$s3PwZ14ExpressionCaseOmD",
        "key.usr" : "s:3PwZ14ExpressionCaseO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public indirect enum ContextCase : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.indirect",
            "key.length" : 8,
            "key.offset" : 2885
          },
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 2878
          }
        ],
        "key.bodylength" : 1192,
        "key.bodyoffset" : 2923,
        "key.doc.column" : 22,
        "key.doc.comment" : "ContextCases represent the context of a zipper's focused-on expression.",
        "key.doc.declaration" : "public indirect enum ContextCase : Equatable",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"79\" column=\"22\"><Name>ContextCase<\/Name><USR>s:3PwZ11ContextCaseO<\/USR><Declaration>public indirect enum ContextCase : Equatable<\/Declaration><CommentParts><Abstract><Para>ContextCases represent the context of a zipper’s focused-on expression.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 79,
        "key.doc.name" : "ContextCase",
        "key.doc.type" : "Other",
        "key.doclength" : 76,
        "key.docoffset" : 2802,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 2912
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.enum><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>indirect<\/syntaxtype.keyword> <syntaxtype.keyword>enum<\/syntaxtype.keyword> <decl.name>ContextCase<\/decl.name> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.enum>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.enum",
        "key.length" : 1222,
        "key.name" : "ContextCase",
        "key.namelength" : 11,
        "key.nameoffset" : 2899,
        "key.offset" : 2894,
        "key.parsed_declaration" : "public indirect enum ContextCase: Equatable",
        "key.parsed_scope.end" : 103,
        "key.parsed_scope.start" : 79,
        "key.substructure" : [
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 9,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 2982,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case TopC<\/Declaration>",
                "key.doc.column" : 10,
                "key.doc.comment" : "The special case for the root of the grammar.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"81\" column=\"10\"><Name>TopC<\/Name><USR>s:3PwZ11ContextCaseO4TopCyA2CmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>The special case for the root of the grammar.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 81,
                "key.doc.name" : "TopC",
                "key.doc.type" : "Other",
                "key.doclength" : 50,
                "key.docoffset" : 2928,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>TopC<\/decl.name><\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 4,
                "key.name" : "TopC",
                "key.namelength" : 4,
                "key.nameoffset" : 2987,
                "key.offset" : 2987,
                "key.parsed_declaration" : "case TopC",
                "key.parsed_scope.end" : 81,
                "key.parsed_scope.start" : 81,
                "key.typename" : "(ContextCase.Type) -> ContextCase",
                "key.typeusr" : "$sy3PwZ11ContextCaseOACmcD",
                "key.usr" : "s:3PwZ11ContextCaseO4TopCyA2CmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 168,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3240,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case SeqC(memoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>, symbol: <Type usr=\"s:3PwZ6Symbola\">Symbol<\/Type>, leftExpressions: [<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>], rightExpressions: [<Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>])<\/Declaration>",
                "key.doc.column" : 10,
                "key.doc.comment" : "Contexts for `Seq`, consisting of a `MemoizationRecord`, the sequence's\nproduction name, and two lists of `Expression`s representing the left and\nright siblings of the current focused-on expression in the zipper.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"87\" column=\"10\"><Name>SeqC(memoizationRecord:symbol:leftExpressions:rightExpressions:)<\/Name><USR>s:3PwZ11ContextCaseO4SeqCyAcA17MemoizationRecordC_SSSayAA10ExpressionCGAItcACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Contexts for <codeVoice>Seq<\/codeVoice>, consisting of a <codeVoice>MemoizationRecord<\/codeVoice>, the sequence’s production name, and two lists of <codeVoice>Expression<\/codeVoice>s representing the left and right siblings of the current focused-on expression in the zipper.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 87,
                "key.doc.name" : "SeqC(memoizationRecord:symbol:leftExpressions:rightExpressions:)",
                "key.doc.type" : "Other",
                "key.doclength" : 239,
                "key.docoffset" : 2996,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>SeqC<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>memoizationRecord<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>symbol<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ6Symbola\">Symbol<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>leftExpressions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>rightExpressions<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>]<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 163,
                "key.name" : "SeqC(memoizationRecord:symbol:leftExpressions:rightExpressions:)",
                "key.namelength" : 163,
                "key.nameoffset" : 3245,
                "key.offset" : 3245,
                "key.parsed_declaration" : "case SeqC(memoizationRecord: MemoizationRecord,\n          symbol: Symbol,\n          leftExpressions: [Expression],\n          rightExpressions: [Expression])",
                "key.parsed_scope.end" : 87,
                "key.parsed_scope.start" : 87,
                "key.typename" : "(ContextCase.Type) -> (MemoizationRecord, String, [Expression], [Expression]) -> ContextCase",
                "key.typeusr" : "$sy3PwZ11ContextCaseOAA17MemoizationRecordC_SSSayAA10ExpressionCGAHtcACmcD",
                "key.usr" : "s:3PwZ11ContextCaseO4SeqCyAcA17MemoizationRecordC_SSSayAA10ExpressionCGAItcACmF"
              }
            ]
          },
          {
            "key.kind" : "source.lang.swift.decl.enumcase",
            "key.length" : 47,
            "key.namelength" : 0,
            "key.nameoffset" : 0,
            "key.offset" : 3484,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.public",
                "key.annotated_decl" : "<Declaration>case AltC(memoizationRecord: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>)<\/Declaration>",
                "key.doc.column" : 10,
                "key.doc.comment" : "Contexts for `Alt`, which contains only a `MemoizationRecord`.",
                "key.doc.declaration" : "",
                "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"92\" column=\"10\"><Name>AltC(memoizationRecord:)<\/Name><USR>s:3PwZ11ContextCaseO4AltCyAcA17MemoizationRecordC_tcACmF<\/USR><Declaration><\/Declaration><CommentParts><Abstract><Para>Contexts for <codeVoice>Alt<\/codeVoice>, which contains only a <codeVoice>MemoizationRecord<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Other>",
                "key.doc.line" : 92,
                "key.doc.name" : "AltC(memoizationRecord:)",
                "key.doc.type" : "Other",
                "key.doclength" : 67,
                "key.docoffset" : 3413,
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.enumelement><syntaxtype.keyword>case<\/syntaxtype.keyword> <decl.name>AltC<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>memoizationRecord<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.enumelement>",
                "key.kind" : "source.lang.swift.decl.enumelement",
                "key.length" : 42,
                "key.name" : "AltC(memoizationRecord:)",
                "key.namelength" : 42,
                "key.nameoffset" : 3489,
                "key.offset" : 3489,
                "key.parsed_declaration" : "case AltC(memoizationRecord: MemoizationRecord)",
                "key.parsed_scope.end" : 92,
                "key.parsed_scope.start" : 92,
                "key.typename" : "(ContextCase.Type) -> (MemoizationRecord) -> ContextCase",
                "key.typeusr" : "$sy3PwZ11ContextCaseOAA17MemoizationRecordC_tcACmcD",
                "key.usr" : "s:3PwZ11ContextCaseO4AltCyAcA17MemoizationRecordC_tcACmF"
              }
            ]
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: <Type usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/Type>, rhs: <Type usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 3609
              }
            ],
            "key.bodylength" : 436,
            "key.bodyoffset" : 3677,
            "key.doc.column" : 24,
            "key.doc.comment" : "`ContextCase`s are trivially `Equatable` from their components.",
            "key.doc.declaration" : "public static func == (lhs: ContextCase, rhs: ContextCase) -> Bool",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"95\" column=\"24\"><Name>==(_:_:)<\/Name><USR>s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ<\/USR><Declaration>public static func == (lhs: ContextCase, rhs: ContextCase) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para><codeVoice>ContextCase<\/codeVoice>s are trivially <codeVoice>Equatable<\/codeVoice> from their components.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 95,
            "key.doc.name" : "==(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 68,
            "key.docoffset" : 3537,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 498,
            "key.name" : "==(_:_:)",
            "key.namelength" : 39,
            "key.nameoffset" : 3628,
            "key.offset" : 3616,
            "key.overrides" : [
              {
                "key.usr" : "s:SQ2eeoiySbx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func == (lhs: ContextCase, rhs: ContextCase) -> Bool",
            "key.parsed_scope.end" : 102,
            "key.parsed_scope.start" : 95,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ\">== (_: ReferenceArray&lt;Element&gt;, _: ReferenceArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ\">== (_: Expression, _: Expression) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ\">== (_: ExpressionCase, _: ExpressionCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ\">== (_: MemoizationRecord, _: MemoizationRecord) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbypXpSg_ABtF\">== (_: Any.Type?, _: Any.Type?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_xtSYRzSQ8RawValueRpzlF\">== &lt;T&gt;(_: T, _: T) -&gt; Bool where T : RawRepresentable, T.RawValue : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbyt_yttF\">== (_: (), _: ()) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF\">== &lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Equatable, B : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_t_x_q_q0_ttSQRzSQR_SQR0_r1_lF\">== &lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_t_x_q_q0_q1_ttSQRzSQR_SQR0_SQR1_r2_lF\">== &lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_t_x_q_q0_q1_q2_ttSQRzSQR_SQR0_SQR1_SQR2_r3_lF\">== &lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_ttSQRzSQR_SQR0_SQR1_SQR2_SQR3_r4_lF\">== &lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSQRzlE2eeoiySbSayxG_ABtFZ\">== (_: Array&lt;Element&gt;, _: Array&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10ArraySliceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ArraySlice&lt;Element&gt;, _: ArraySlice&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sb2eeoiyS2b_SbtFZ\">== (_: Bool, _: Bool) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ2eeoiySbSJ_SJtFZ\">== (_: Character, _: Character) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17CodingUserInfoKeyV2eeoiySbAB_ABtFZ\">== (_: CodingUserInfoKey, _: CodingUserInfoKey) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15ContiguousArrayVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ContiguousArray&lt;Element&gt;, _: ContiguousArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SNsSxRzSZ6StrideRpzrlE5IndexO2eeoiySbADyx_G_AFtFZ\">== (_: ClosedRange&lt;Bound&gt;.Index, _: ClosedRange&lt;Bound&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SN2eeoiySbSNyxG_ABtFZ\">== (_: ClosedRange&lt;Bound&gt;, _: ClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13OpaquePointerV2eeoiySbAB_ABtFZ\">== (_: OpaquePointer, _: OpaquePointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD4KeysV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Keys, _: Dictionary&lt;Key, Value&gt;.Keys) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SDsSQR_rlE2eeoiySbSDyxq_G_ABtFZ\">== (_: [Key : Value], _: [Key : Value]) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD5IndexV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15EmptyCollectionV2eeoiySbAByxG_ADtFZ\">== (_: EmptyCollection&lt;Element&gt;, _: EmptyCollection&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SQ2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15FlattenSequenceVsSlRzSl7ElementRpzrlE5IndexV2eeoiySbAFyx_G_AHtFZ\">== (_: FlattenCollection&lt;Base&gt;.Index, _: FlattenCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FloatingPointSignO2eeoiySbAB_ABtFZ\">== (_: FloatingPointSign, _: FloatingPointSign) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27FloatingPointClassificationO2eeoiySbAB_ABtFZ\">== (_: FloatingPointClassification, _: FloatingPointClassification) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s25FloatingPointRoundingRuleO2eeoiySbAB_ABtFZ\">== (_: FloatingPointRoundingRule, _: FloatingPointRoundingRule) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SFsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11AnyHashableV2eeoiySbAB_ABtFZ\">== (_: AnyHashable, _: AnyHashable) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SzsE2eeoiySbx_qd__tSzRd__lFZ\">== &lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2eeoiySbAB_ABtFZ\">== (_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2eeoiySbAB_ABtFZ\">== (_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2eeoiySbAB_ABtFZ\">== (_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2eeoiySbAB_ABtFZ\">== (_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2eeoiySbAB_ABtFZ\">== (_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2eeoiySbAB_ABtFZ\">== (_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2eeoiySbAB_ABtFZ\">== (_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2eeoiySbAB_ABtFZ\">== (_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2eeoiySbSu_SutFZ\">== (_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2eeoiySbSi_SitFZ\">== (_: Int, _: Int) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10AnyKeyPathC2eeoiySbAB_ABtFZ\">== (_: AnyKeyPath, _: AnyKeyPath) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20ManagedBufferPointerV2eeoiySbAByxq_G_ADtFZ\">== (_: ManagedBufferPointer&lt;Header, Element&gt;, _: ManagedBufferPointer&lt;Header, Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV2eeoiySbAD_ADtFZ\">== (_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SO2eeoiySbSO_SOtFZ\">== (_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SqsSQRzlE2eeoiySbxSg_ABtFZ\">== (_: Wrapped?, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbxSg_s26_OptionalNilComparisonTypeVtFZ\">== (_: Wrapped?, _: _OptionalNilComparisonType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbs26_OptionalNilComparisonTypeV_xSgtFZ\">== (_: _OptionalNilComparisonType, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8_PointerPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5NeverO2eeoiySbAB_ABtFZ\">== (_: Never, _: Never) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23LazyPrefixWhileSequenceVsSlRzrlE5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: LazyPrefixWhileCollection&lt;Base&gt;.Index, _: LazyPrefixWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sn2eeoiySbSnyxG_ABtFZ\">== (_: Range&lt;Bound&gt;, _: Range&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6ResultOsSQRzSQR_rlE2eeoiySbAByxq_G_ADtFZ\">== (_: Result&lt;Success, Failure&gt;, _: Result&lt;Success, Failure&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s18ReversedCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: ReversedCollection&lt;Base&gt;.Index, _: ReversedCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh2eeoiySbShyxG_ABtFZ\">== (_: Set&lt;Element&gt;, _: Set&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh5IndexV2eeoiySbAByx_G_ADtFZ\">== (_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SxsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SysE2eeoiySbx_qd__tSyRd__lFZ\">== &lt;RHS&gt;(_: Self, _: RHS) -&gt; Bool where RHS : StringProtocol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS2eeoiySbSS_SStFZ\">== (_: String, _: String) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV2eeoiySbAB_ABtFZ\">== (_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: _UIntBuffer&lt;Element&gt;.Index, _: _UIntBuffer&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO15GeneralCategoryO2eeoiySbAD_ADtFZ\">== (_: Unicode.GeneralCategory, _: Unicode.GeneralCategory) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO23CanonicalCombiningClassV2eeoiySbAD_ADtFZ\">== (_: Unicode.CanonicalCombiningClass, _: Unicode.CanonicalCombiningClass) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO11NumericTypeO2eeoiySbAD_ADtFZ\">== (_: Unicode.NumericType, _: Unicode.NumericType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO5UTF32O2eeoiySbAD_ADtFZ\">== (_: Unicode.UTF32, _: Unicode.UTF32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s21UnicodeDecodingResultO2eeoiySbAB_ABtFZ\">== (_: UnicodeDecodingResult, _: UnicodeDecodingResult) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV2eeoiySbAD_ADtFZ\">== (_: _ValidUTF8Buffer.Index, _: _ValidUTF8Buffer.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Index, _: CollectionDifference&lt;ChangeElement&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV6ChangeOsSQRzlE2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Change, _: CollectionDifference&lt;ChangeElement&gt;.Change) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;, _: CollectionDifference&lt;ChangeElement&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV2eeoiySbAB_ABtFZ\">== (_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6MirrorV12DisplayStyleO2eeoiySbAD_ADtFZ\">== (_: Mirror.DisplayStyle, _: Mirror.DisplayStyle) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.enum usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/ref.enum><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 3632,
                "key.parent_loc" : 3628,
                "key.parsed_declaration" : "public static func == (lhs",
                "key.parsed_scope.end" : 95,
                "key.parsed_scope.start" : 95,
                "key.typename" : "ContextCase",
                "key.typeusr" : "$s3PwZ11ContextCaseOD",
                "key.usr" : "s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ3lhsL_ACvp"
              }
            ],
            "key.typename" : "(ContextCase.Type) -> (ContextCase, ContextCase) -> Bool",
            "key.typeusr" : "$sySb3PwZ11ContextCaseO_ACtcD",
            "key.usr" : "s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ"
          }
        ],
        "key.typename" : "ContextCase.Type",
        "key.typeusr" : "$s3PwZ11ContextCaseOmD",
        "key.usr" : "s:3PwZ11ContextCaseO"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public class MemoizationRecord : <Type usr=\"s:SQ\">Equatable<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 4237
          }
        ],
        "key.bodylength" : 1514,
        "key.bodyoffset" : 4280,
        "key.doc.column" : 14,
        "key.doc.comment" : "Memoization records are used to fix recursion, cycles, and duplication in\ncertain kinds of grammar traversals.",
        "key.doc.declaration" : "public class MemoizationRecord : Equatable",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Class file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"107\" column=\"14\"><Name>MemoizationRecord<\/Name><USR>s:3PwZ17MemoizationRecordC<\/USR><Declaration>public class MemoizationRecord : Equatable<\/Declaration><CommentParts><Abstract><Para>Memoization records are used to fix recursion, cycles, and duplication in certain kinds of grammar traversals.<\/Para><\/Abstract><\/CommentParts><\/Class>",
        "key.doc.line" : 107,
        "key.doc.name" : "MemoizationRecord",
        "key.doc.type" : "Class",
        "key.doclength" : 119,
        "key.docoffset" : 4118,
        "key.elements" : [
          {
            "key.kind" : "source.lang.swift.structure.elem.typeref",
            "key.length" : 9,
            "key.offset" : 4269
          }
        ],
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.class><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>class<\/syntaxtype.keyword> <decl.name>MemoizationRecord<\/decl.name> : <ref.protocol usr=\"s:SQ\">Equatable<\/ref.protocol><\/decl.class>",
        "key.inheritedtypes" : [
          {
            "key.name" : "Equatable"
          }
        ],
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 1551,
        "key.name" : "MemoizationRecord",
        "key.namelength" : 17,
        "key.nameoffset" : 4250,
        "key.offset" : 4244,
        "key.parsed_declaration" : "public class MemoizationRecord: Equatable",
        "key.parsed_scope.end" : 142,
        "key.parsed_scope.start" : 107,
        "key.runtime_name" : "_TtC4main17MemoizationRecord",
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>let startPosition: <Type usr=\"s:3PwZ8Positiona\">Position<\/Type><\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "The position of the first token in the input to which this memoization\nrecord corresponds.",
            "key.doc.declaration" : "let startPosition: Position",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"110\" column=\"9\"><Name>startPosition<\/Name><USR>s:3PwZ17MemoizationRecordC13startPositionSivp<\/USR><Declaration>let startPosition: Position<\/Declaration><CommentParts><Abstract><Para>The position of the first token in the input to which this memoization record corresponds.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 110,
            "key.doc.name" : "startPosition",
            "key.doc.type" : "Other",
            "key.doclength" : 103,
            "key.docoffset" : 4285,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>startPosition<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ8Positiona\">Position<\/ref.typealias><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 27,
            "key.name" : "startPosition",
            "key.namelength" : 13,
            "key.nameoffset" : 4396,
            "key.offset" : 4392,
            "key.parsed_declaration" : "let startPosition: Position",
            "key.parsed_scope.end" : 110,
            "key.parsed_scope.start" : 110,
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:3PwZ17MemoizationRecordC13startPositionSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var endPosition: <Type usr=\"s:3PwZ8Positiona\">Position<\/Type><\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "The position of the last token in the input to which this memoization\nrecord corresponds.",
            "key.doc.declaration" : "var endPosition: Position",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"113\" column=\"9\"><Name>endPosition<\/Name><USR>s:3PwZ17MemoizationRecordC11endPositionSivp<\/USR><Declaration>var endPosition: Position<\/Declaration><CommentParts><Abstract><Para>The position of the last token in the input to which this memoization record corresponds.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 113,
            "key.doc.name" : "endPosition",
            "key.doc.type" : "Other",
            "key.doclength" : 102,
            "key.docoffset" : 4424,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>endPosition<\/decl.name>: <decl.var.type><ref.typealias usr=\"s:3PwZ8Positiona\">Position<\/ref.typealias><\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 25,
            "key.name" : "endPosition",
            "key.namelength" : 11,
            "key.nameoffset" : 4534,
            "key.offset" : 4530,
            "key.parsed_declaration" : "var endPosition: Position",
            "key.parsed_scope.end" : 113,
            "key.parsed_scope.start" : 113,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.typename" : "Int",
            "key.typeusr" : "$sSiD",
            "key.usr" : "s:3PwZ17MemoizationRecordC11endPositionSivp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var parentContexts: [<Type usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/Type>]<\/Declaration>",
            "key.doc.column" : 9,
            "key.doc.comment" : "Parent contexts to which this memoization record shall report its\nresult when needed.",
            "key.doc.declaration" : "var parentContexts: [ContextCase]",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"116\" column=\"9\"><Name>parentContexts<\/Name><USR>s:3PwZ17MemoizationRecordC14parentContextsSayAA11ContextCaseOGvp<\/USR><Declaration>var parentContexts: [ContextCase]<\/Declaration><CommentParts><Abstract><Para>Parent contexts to which this memoization record shall report its result when needed.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 116,
            "key.doc.name" : "parentContexts",
            "key.doc.type" : "Other",
            "key.doclength" : 98,
            "key.docoffset" : 4560,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>parentContexts<\/decl.name>: <decl.var.type>[<ref.enum usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/ref.enum>]<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 33,
            "key.name" : "parentContexts",
            "key.namelength" : 14,
            "key.nameoffset" : 4666,
            "key.offset" : 4662,
            "key.parsed_declaration" : "var parentContexts: [ContextCase]",
            "key.parsed_scope.end" : 116,
            "key.parsed_scope.start" : 116,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.typename" : "[ContextCase]",
            "key.typeusr" : "$sSay3PwZ11ContextCaseOGD",
            "key.usr" : "s:3PwZ17MemoizationRecordC14parentContextsSayAA11ContextCaseOGvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>var resultExpression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type> { get set }<\/Declaration>",
            "key.bodylength" : 97,
            "key.bodyoffset" : 4809,
            "key.doc.column" : 9,
            "key.doc.comment" : "The expression resulting from the parse over the indicated region.",
            "key.doc.declaration" : "var resultExpression: Expression { get set }",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"118\" column=\"9\"><Name>resultExpression<\/Name><USR>s:3PwZ17MemoizationRecordC16resultExpressionAA0E0Cvp<\/USR><Declaration>var resultExpression: Expression { get set }<\/Declaration><CommentParts><Abstract><Para>The expression resulting from the parse over the indicated region.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 118,
            "key.doc.name" : "resultExpression",
            "key.doc.type" : "Other",
            "key.doclength" : 71,
            "key.docoffset" : 4700,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>resultExpression<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class><\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> <syntaxtype.keyword>set<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 132,
            "key.name" : "resultExpression",
            "key.namelength" : 16,
            "key.nameoffset" : 4779,
            "key.offset" : 4775,
            "key.parsed_declaration" : "var resultExpression: Expression",
            "key.parsed_scope.end" : 121,
            "key.parsed_scope.start" : 118,
            "key.setter_accessibility" : "source.lang.swift.accessibility.internal",
            "key.typename" : "Expression",
            "key.typeusr" : "$s3PwZ10ExpressionCD",
            "key.usr" : "s:3PwZ17MemoizationRecordC16resultExpressionAA0E0Cvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private var _resultExpression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 4968
              }
            ],
            "key.doc.column" : 17,
            "key.doc.comment" : "The internal representation of the expression.",
            "key.doc.declaration" : "private var _resultExpression: PwZ.Expression?",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"124\" column=\"17\"><Name>_resultExpression<\/Name><USR>s:3PwZ17MemoizationRecordC17_resultExpression33_BA32D2E92CF1A1850DB97EEE0CE6FC61LLAA0E0CSgvp<\/USR><Declaration>private var _resultExpression: PwZ.Expression?<\/Declaration><CommentParts><Abstract><Para>The internal representation of the expression.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 124,
            "key.doc.name" : "_resultExpression",
            "key.doc.type" : "Other",
            "key.doclength" : 51,
            "key.docoffset" : 4913,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>_resultExpression<\/decl.name>: <decl.var.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>?<\/decl.var.type><\/decl.var.instance>",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 34,
            "key.name" : "_resultExpression",
            "key.namelength" : 17,
            "key.nameoffset" : 4980,
            "key.offset" : 4976,
            "key.parsed_declaration" : "private var _resultExpression: Expression?",
            "key.parsed_scope.end" : 124,
            "key.parsed_scope.start" : 124,
            "key.setter_accessibility" : "source.lang.swift.accessibility.private",
            "key.typename" : "Expression?",
            "key.typeusr" : "$s3PwZ10ExpressionCSgD",
            "key.usr" : "s:3PwZ17MemoizationRecordC17_resultExpression33_BA32D2E92CF1A1850DB97EEE0CE6FC61LLAA0E0CSgvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public init(startPosition: <Type usr=\"s:3PwZ8Positiona\">Position<\/Type>, endPosition: <Type usr=\"s:3PwZ8Positiona\">Position<\/Type>, parentContexts: [<Type usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/Type>], resultExpression: <Type usr=\"s:3PwZ10ExpressionC\">Expression<\/Type>?)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5093
              }
            ],
            "key.bodylength" : 182,
            "key.bodyoffset" : 5216,
            "key.doc.column" : 12,
            "key.doc.comment" : "Initializes a new `MemoizationRecord` from the necessary components.",
            "key.doc.declaration" : "public init(startPosition: Position, endPosition: Position, parentContexts: [ContextCase], resultExpression: Expression?)",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"127\" column=\"12\"><Name>init(startPosition:endPosition:parentContexts:resultExpression:)<\/Name><USR>s:3PwZ17MemoizationRecordC13startPosition03endE014parentContexts16resultExpressionACSi_SiSayAA11ContextCaseOGAA0J0CSgtcfc<\/USR><Declaration>public init(startPosition: Position, endPosition: Position, parentContexts: [ContextCase], resultExpression: Expression?)<\/Declaration><CommentParts><Abstract><Para>Initializes a new <codeVoice>MemoizationRecord<\/codeVoice> from the necessary components.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 127,
            "key.doc.name" : "init(startPosition:endPosition:parentContexts:resultExpression:)",
            "key.doc.type" : "Function",
            "key.doclength" : 73,
            "key.docoffset" : 5016,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.function.constructor><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>init<\/syntaxtype.keyword>(<decl.var.parameter><decl.var.parameter.argument_label>startPosition<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ8Positiona\">Position<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>endPosition<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.typealias usr=\"s:3PwZ8Positiona\">Position<\/ref.typealias><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>parentContexts<\/decl.var.parameter.argument_label>: <decl.var.parameter.type>[<ref.enum usr=\"s:3PwZ11ContextCaseO\">ContextCase<\/ref.enum>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>resultExpression<\/decl.var.parameter.argument_label>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ10ExpressionC\">Expression<\/ref.class>?<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.constructor>",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 299,
            "key.name" : "init(startPosition:endPosition:parentContexts:resultExpression:)",
            "key.namelength" : 114,
            "key.nameoffset" : 5100,
            "key.offset" : 5100,
            "key.parsed_declaration" : "public init(startPosition: Position, endPosition: Position, parentContexts: [ContextCase], resultExpression: Expression?)",
            "key.parsed_scope.end" : 132,
            "key.parsed_scope.start" : 127,
            "key.substructure" : [

            ],
            "key.typename" : "(MemoizationRecord.Type) -> (Int, Int, [ContextCase], Expression?) -> MemoizationRecord",
            "key.typeusr" : "$s13startPosition03endB014parentContexts16resultExpression3PwZ17MemoizationRecordCSi_SiSayAE11ContextCaseOGAE0G0CSgtcD",
            "key.usr" : "s:3PwZ17MemoizationRecordC13startPosition03endE014parentContexts16resultExpressionACSi_SiSayAA11ContextCaseOGAA0J0CSgtcfc"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public static func == (lhs: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>, rhs: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 5483
              }
            ],
            "key.bodylength" : 229,
            "key.bodyoffset" : 5563,
            "key.doc.column" : 24,
            "key.doc.comment" : "`MemoizationRecords` are trivially `Equatable` from their components.",
            "key.doc.declaration" : "public static func == (lhs: MemoizationRecord, rhs: MemoizationRecord) -> Bool",
            "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"135\" column=\"24\"><Name>==(_:_:)<\/Name><USR>s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ<\/USR><Declaration>public static func == (lhs: MemoizationRecord, rhs: MemoizationRecord) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para><codeVoice>MemoizationRecords<\/codeVoice> are trivially <codeVoice>Equatable<\/codeVoice> from their components.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 135,
            "key.doc.name" : "==(_:_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 74,
            "key.docoffset" : 5405,
            "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
            "key.fully_annotated_decl" : "<decl.function.operator.infix><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>static<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>== <\/decl.name>(<decl.var.parameter><decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.name>rhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.operator.infix>",
            "key.kind" : "source.lang.swift.decl.function.method.static",
            "key.length" : 303,
            "key.name" : "==(_:_:)",
            "key.namelength" : 51,
            "key.nameoffset" : 5502,
            "key.offset" : 5490,
            "key.overrides" : [
              {
                "key.usr" : "s:SQ2eeoiySbx_xtFZ"
              }
            ],
            "key.parsed_declaration" : "public static func == (lhs: MemoizationRecord, rhs: MemoizationRecord) -> Bool",
            "key.parsed_scope.end" : 141,
            "key.parsed_scope.start" : 135,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ\">== (_: ReferenceArray&lt;Element&gt;, _: ReferenceArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ\">== (_: Expression, _: Expression) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ\">== (_: ExpressionCase, _: ExpressionCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ\">== (_: ContextCase, _: ContextCase) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbypXpSg_ABtF\">== (_: Any.Type?, _: Any.Type?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_xtSYRzSQ8RawValueRpzlF\">== &lt;T&gt;(_: T, _: T) -&gt; Bool where T : RawRepresentable, T.RawValue : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbyt_yttF\">== (_: (), _: ()) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_t_x_q_ttSQRzSQR_r0_lF\">== &lt;A, B&gt;(_: (A, B), _: (A, B)) -&gt; Bool where A : Equatable, B : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_t_x_q_q0_ttSQRzSQR_SQR0_r1_lF\">== &lt;A, B, C&gt;(_: (A, B, C), _: (A, B, C)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_t_x_q_q0_q1_ttSQRzSQR_SQR0_SQR1_r2_lF\">== &lt;A, B, C, D&gt;(_: (A, B, C, D), _: (A, B, C, D)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_t_x_q_q0_q1_q2_ttSQRzSQR_SQR0_SQR1_SQR2_r3_lF\">== &lt;A, B, C, D, E&gt;(_: (A, B, C, D, E), _: (A, B, C, D, E)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s2eeoiySbx_q_q0_q1_q2_q3_t_x_q_q0_q1_q2_q3_ttSQRzSQR_SQR0_SQR1_SQR2_SQR3_r4_lF\">== &lt;A, B, C, D, E, F&gt;(_: (A, B, C, D, E, F), _: (A, B, C, D, E, F)) -&gt; Bool where A : Equatable, B : Equatable, C : Equatable, D : Equatable, E : Equatable, F : Equatable<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SasSQRzlE2eeoiySbSayxG_ABtFZ\">== (_: Array&lt;Element&gt;, _: Array&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10ArraySliceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ArraySlice&lt;Element&gt;, _: ArraySlice&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sb2eeoiyS2b_SbtFZ\">== (_: Bool, _: Bool) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SJ2eeoiySbSJ_SJtFZ\">== (_: Character, _: Character) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17CodingUserInfoKeyV2eeoiySbAB_ABtFZ\">== (_: CodingUserInfoKey, _: CodingUserInfoKey) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15ContiguousArrayVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: ContiguousArray&lt;Element&gt;, _: ContiguousArray&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SNsSxRzSZ6StrideRpzrlE5IndexO2eeoiySbADyx_G_AFtFZ\">== (_: ClosedRange&lt;Bound&gt;.Index, _: ClosedRange&lt;Bound&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SN2eeoiySbSNyxG_ABtFZ\">== (_: ClosedRange&lt;Bound&gt;, _: ClosedRange&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s13OpaquePointerV2eeoiySbAB_ABtFZ\">== (_: OpaquePointer, _: OpaquePointer) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD4KeysV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Keys, _: Dictionary&lt;Key, Value&gt;.Keys) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SDsSQR_rlE2eeoiySbSDyxq_G_ABtFZ\">== (_: [Key : Value], _: [Key : Value]) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SD5IndexV2eeoiySbAByxq__G_ADtFZ\">== (_: Dictionary&lt;Key, Value&gt;.Index, _: Dictionary&lt;Key, Value&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15EmptyCollectionV2eeoiySbAByxG_ADtFZ\">== (_: EmptyCollection&lt;Element&gt;, _: EmptyCollection&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SQ2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s15FlattenSequenceVsSlRzSl7ElementRpzrlE5IndexV2eeoiySbAFyx_G_AHtFZ\">== (_: FlattenCollection&lt;Base&gt;.Index, _: FlattenCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s17FloatingPointSignO2eeoiySbAB_ABtFZ\">== (_: FloatingPointSign, _: FloatingPointSign) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s27FloatingPointClassificationO2eeoiySbAB_ABtFZ\">== (_: FloatingPointClassification, _: FloatingPointClassification) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s25FloatingPointRoundingRuleO2eeoiySbAB_ABtFZ\">== (_: FloatingPointRoundingRule, _: FloatingPointRoundingRule) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SFsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11AnyHashableV2eeoiySbAB_ABtFZ\">== (_: AnyHashable, _: AnyHashable) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SzsE2eeoiySbx_qd__tSzRd__lFZ\">== &lt;Other&gt;(_: Self, _: Other) -&gt; Bool where Other : BinaryInteger<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5UInt8V2eeoiySbAB_ABtFZ\">== (_: UInt8, _: UInt8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4Int8V2eeoiySbAB_ABtFZ\">== (_: Int8, _: Int8) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt16V2eeoiySbAB_ABtFZ\">== (_: UInt16, _: UInt16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int16V2eeoiySbAB_ABtFZ\">== (_: Int16, _: Int16) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt32V2eeoiySbAB_ABtFZ\">== (_: UInt32, _: UInt32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int32V2eeoiySbAB_ABtFZ\">== (_: Int32, _: Int32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6UInt64V2eeoiySbAB_ABtFZ\">== (_: UInt64, _: UInt64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5Int64V2eeoiySbAB_ABtFZ\">== (_: Int64, _: Int64) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Su2eeoiySbSu_SutFZ\">== (_: UInt, _: UInt) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Si2eeoiySbSi_SitFZ\">== (_: Int, _: Int) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s10AnyKeyPathC2eeoiySbAB_ABtFZ\">== (_: AnyKeyPath, _: AnyKeyPath) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20ManagedBufferPointerV2eeoiySbAByxq_G_ADtFZ\">== (_: ManagedBufferPointer&lt;Header, Element&gt;, _: ManagedBufferPointer&lt;Header, Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO6ScalarV2eeoiySbAD_ADtFZ\">== (_: Unicode.Scalar, _: Unicode.Scalar) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SO2eeoiySbSO_SOtFZ\">== (_: ObjectIdentifier, _: ObjectIdentifier) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SqsSQRzlE2eeoiySbxSg_ABtFZ\">== (_: Wrapped?, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbxSg_s26_OptionalNilComparisonTypeVtFZ\">== (_: Wrapped?, _: _OptionalNilComparisonType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sq2eeoiySbs26_OptionalNilComparisonTypeV_xSgtFZ\">== (_: _OptionalNilComparisonType, _: Wrapped?) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8_PointerPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s5NeverO2eeoiySbAB_ABtFZ\">== (_: Never, _: Never) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s23LazyPrefixWhileSequenceVsSlRzrlE5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: LazyPrefixWhileCollection&lt;Base&gt;.Index, _: LazyPrefixWhileCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sn2eeoiySbSnyxG_ABtFZ\">== (_: Range&lt;Bound&gt;, _: Range&lt;Bound&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6ResultOsSQRzSQR_rlE2eeoiySbAByxq_G_ADtFZ\">== (_: Result&lt;Success, Failure&gt;, _: Result&lt;Success, Failure&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s18ReversedCollectionV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: ReversedCollection&lt;Base&gt;.Index, _: ReversedCollection&lt;Base&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh2eeoiySbShyxG_ABtFZ\">== (_: Set&lt;Element&gt;, _: Set&lt;Element&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:Sh5IndexV2eeoiySbAByx_G_ADtFZ\">== (_: Set&lt;Element&gt;.Index, _: Set&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SxsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SysE2eeoiySbx_qd__tSyRd__lFZ\">== &lt;RHS&gt;(_: Self, _: RHS) -&gt; Bool where RHS : StringProtocol<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS2eeoiySbSS_SStFZ\">== (_: String, _: String) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SS5IndexV2eeoiySbAB_ABtFZ\">== (_: String.Index, _: String.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s11_UIntBufferV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: _UIntBuffer&lt;Element&gt;.Index, _: _UIntBuffer&lt;Element&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO15GeneralCategoryO2eeoiySbAD_ADtFZ\">== (_: Unicode.GeneralCategory, _: Unicode.GeneralCategory) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO23CanonicalCombiningClassV2eeoiySbAD_ADtFZ\">== (_: Unicode.CanonicalCombiningClass, _: Unicode.CanonicalCombiningClass) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO11NumericTypeO2eeoiySbAD_ADtFZ\">== (_: Unicode.NumericType, _: Unicode.NumericType) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s7UnicodeO5UTF32O2eeoiySbAD_ADtFZ\">== (_: Unicode.UTF32, _: Unicode.UTF32) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s21UnicodeDecodingResultO2eeoiySbAB_ABtFZ\">== (_: UnicodeDecodingResult, _: UnicodeDecodingResult) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s16_ValidUTF8BufferV5IndexV2eeoiySbAD_ADtFZ\">== (_: _ValidUTF8Buffer.Index, _: _ValidUTF8Buffer.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV5IndexV2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Index, _: CollectionDifference&lt;ChangeElement&gt;.Index) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceV6ChangeOsSQRzlE2eeoiySbADyx_G_AFtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;.Change, _: CollectionDifference&lt;ChangeElement&gt;.Change) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s20CollectionDifferenceVsSQRzlE2eeoiySbAByxG_ADtFZ\">== (_: CollectionDifference&lt;ChangeElement&gt;, _: CollectionDifference&lt;ChangeElement&gt;) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s8AnyIndexV2eeoiySbAB_ABtFZ\">== (_: AnyIndex, _: AnyIndex) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s6MirrorV12DisplayStyleO2eeoiySbAD_ADtFZ\">== (_: Mirror.DisplayStyle, _: Mirror.DisplayStyle) -&gt; Bool<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:s4SIMDPsE2eeoiySbx_xtFZ\">== (_: Self, _: Self) -&gt; Bool<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let lhs: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
                "key.fully_annotated_decl" : "<decl.var.parameter><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.var.parameter.name>lhs<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/decl.var.parameter.type><\/decl.var.parameter>",
                "key.kind" : "source.lang.swift.decl.var.parameter",
                "key.length" : 3,
                "key.name" : "lhs",
                "key.offset" : 5506,
                "key.parent_loc" : 5502,
                "key.parsed_declaration" : "public static func == (lhs",
                "key.parsed_scope.end" : 135,
                "key.parsed_scope.start" : 135,
                "key.typename" : "MemoizationRecord",
                "key.typeusr" : "$s3PwZ17MemoizationRecordCD",
                "key.usr" : "s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ3lhsL_ACvp"
              }
            ],
            "key.typename" : "(MemoizationRecord.Type) -> (MemoizationRecord, MemoizationRecord) -> Bool",
            "key.typeusr" : "$sySb3PwZ17MemoizationRecordC_ACtcD",
            "key.usr" : "s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ"
          }
        ],
        "key.typename" : "MemoizationRecord.Type",
        "key.typeusr" : "$s3PwZ17MemoizationRecordCmD",
        "key.usr" : "s:3PwZ17MemoizationRecordC"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public typealias Zipper = (expression: <Type usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/Type>, context: <Type usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 6097
          }
        ],
        "key.doc.column" : 18,
        "key.doc.comment" : "A Zipper is a pair of an expression with its parent context, allowing for\nefficient traversal of tree-like objects. We have adjusted the traditional\nzipper to support alternates (representing non-determinisim) as well as cycles.",
        "key.doc.declaration" : "public typealias Zipper = (expression: ExpressionCase, context: MemoizationRecord)",
        "key.doc.file" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.doc.full_as_xml" : "<Other file=\"\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift\" line=\"155\" column=\"18\"><Name>Zipper<\/Name><USR>s:3PwZ6Zippera<\/USR><Declaration>public typealias Zipper = (expression: ExpressionCase, context: MemoizationRecord)<\/Declaration><CommentParts><Abstract><Para>A Zipper is a pair of an expression with its parent context, allowing for efficient traversal of tree-like objects. We have adjusted the traditional zipper to support alternates (representing non-determinisim) as well as cycles.<\/Para><\/Abstract><\/CommentParts><\/Other>",
        "key.doc.line" : 155,
        "key.doc.name" : "Zipper",
        "key.doc.type" : "Other",
        "key.doclength" : 239,
        "key.docoffset" : 5857,
        "key.filepath" : "\/Users\/pdarragh\/Development\/swift-parsing-with-zippers\/Sources\/PwZ\/Types.swift",
        "key.fully_annotated_decl" : "<decl.typealias><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>typealias<\/syntaxtype.keyword> <decl.name>Zipper<\/decl.name> = <tuple>(<tuple.element><tuple.element.argument_label>expression<\/tuple.element.argument_label>: <tuple.element.type><ref.enum usr=\"s:3PwZ14ExpressionCaseO\">ExpressionCase<\/ref.enum><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.argument_label>context<\/tuple.element.argument_label>: <tuple.element.type><ref.class usr=\"s:3PwZ17MemoizationRecordC\">MemoizationRecord<\/ref.class><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.typealias>",
        "key.kind" : "source.lang.swift.decl.typealias",
        "key.length" : 75,
        "key.name" : "Zipper",
        "key.namelength" : 6,
        "key.nameoffset" : 6114,
        "key.offset" : 6104,
        "key.parsed_declaration" : "public typealias Zipper = (expression: ExpressionCase, context: MemoizationRecord)",
        "key.parsed_scope.end" : 155,
        "key.parsed_scope.start" : 155,
        "key.typename" : "(expression: ExpressionCase, context: MemoizationRecord).Type",
        "key.typeusr" : "$s3PwZ14ExpressionCaseO10expression_AA17MemoizationRecordC7contexttmD",
        "key.usr" : "s:3PwZ6Zippera"
      }
    ]
  }
}]
