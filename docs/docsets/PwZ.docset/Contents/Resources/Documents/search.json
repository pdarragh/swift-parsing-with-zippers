{"Structs/SentinelStruct.html#/s:3PwZ14SentinelStructV2ofyS2imF":{"name":"of(_:)","abstract":"<p>Create a sentinel for any <code>Int</code> type.</p>","parent_name":"SentinelStruct"},"Structs/SentinelStruct.html#/s:3PwZ14SentinelStructV2ofyS2SmF":{"name":"of(_:)","abstract":"<p>Create a sentinel for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbBasic%20Types.html#/s:3PwZ6Symbola\">Symbol</a></code>.</p>","parent_name":"SentinelStruct"},"Structs/SentinelStruct.html#/s:3PwZ14SentinelStructV2ofySi3tag_SS6symboltSiAE_SSAFtmF":{"name":"of(_:)","abstract":"<p>Create a sentinel for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbBasic%20Types.html#/s:3PwZ5Tokena\">Token</a></code>.</p>","parent_name":"SentinelStruct"},"Structs/SentinelStruct.html#/s:3PwZ14SentinelStructV2ofyAA10ExpressionCAFmF":{"name":"of(_:)","abstract":"<p>Create a sentinel for an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Expression.html\">Expression</a></code>.</p>","parent_name":"SentinelStruct"},"Structs/SentinelStruct.html#/s:3PwZ14SentinelStructV2ofyAA17MemoizationRecordCAFmF":{"name":"of(_:)","abstract":"<p>Create a sentinel for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MemoizationRecord.html\">MemoizationRecord</a></code>.</p>","parent_name":"SentinelStruct"},"Sentinels.html#/s:3PwZ8SentinelAA0B6StructVvp":{"name":"Sentinel","abstract":"<p>The Sentinel singleton allows for using the sentinel values of any of the"},"Structs/SentinelStruct.html":{"name":"SentinelStruct","abstract":"<p>The SentinelStruct exists only to produce a singleton from which sentinel"},"Zippers.html#/s:3PwZ6Zippera":{"name":"Zipper","abstract":"<p>A Zipper is a pair of an expression with its parent context, allowing for"},"Classes/MemoizationRecord.html#/s:3PwZ17MemoizationRecordC13startPosition03endE014parentContexts16resultExpressionACSi_SiSayAA11ContextCaseOGAA0J0CSgtcfc":{"name":"init(startPosition:endPosition:parentContexts:resultExpression:)","abstract":"<p>Initializes a new <code>MemoizationRecord</code> from the necessary components.</p>","parent_name":"MemoizationRecord"},"Classes/MemoizationRecord.html#/s:3PwZ17MemoizationRecordC2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p><code>MemoizationRecords</code> are trivially <code>Equatable</code> from their components.</p>","parent_name":"MemoizationRecord"},"Enums/ContextCase.html#/s:3PwZ11ContextCaseO4TopCyA2CmF":{"name":"TopC","abstract":"<p>The special case for the root of the grammar.</p>","parent_name":"ContextCase"},"Enums/ContextCase.html#/s:3PwZ11ContextCaseO4SeqCyAcA17MemoizationRecordC_SSSayAA10ExpressionCGAItcACmF":{"name":"SeqC(memoizationRecord:symbol:leftExpressions:rightExpressions:)","abstract":"<p>Contexts for <code>Seq</code>, consisting of a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MemoizationRecord.html\">MemoizationRecord</a></code>, the sequence&rsquo;s","parent_name":"ContextCase"},"Enums/ContextCase.html#/s:3PwZ11ContextCaseO4AltCyAcA17MemoizationRecordC_tcACmF":{"name":"AltC(memoizationRecord:)","abstract":"<p>Contexts for <code>Alt</code>, which contains only a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MemoizationRecord.html\">MemoizationRecord</a></code>.</p>","parent_name":"ContextCase"},"Enums/ContextCase.html#/s:3PwZ11ContextCaseO2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p><code>ContextCase</code>s are trivially <code>Equatable</code> from their components.</p>","parent_name":"ContextCase"},"Enums/ExpressionCase.html#/s:3PwZ14ExpressionCaseO3TokyACSi3tag_SS6symbolt_tcACmF":{"name":"Tok(token:)","abstract":"<p>Tokens are trivial constructions.</p>","parent_name":"ExpressionCase"},"Enums/ExpressionCase.html#/s:3PwZ14ExpressionCaseO3SeqyACSS_SayAA0B0CGtcACmF":{"name":"Seq(symbol:expressions:)","abstract":"<p>Sequences consist of a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbBasic%20Types.html#/s:3PwZ6Symbola\">Symbol</a></code> (naming the production represented by","parent_name":"ExpressionCase"},"Enums/ExpressionCase.html#/s:3PwZ14ExpressionCaseO3AltyAcA14ReferenceArrayCyAA0B0CG_tcACmF":{"name":"Alt(expressions:)","abstract":"<p>Alternates are not named. They contain a collection of child <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Expression.html\">Expression</a></code>s.</p>","parent_name":"ExpressionCase"},"Enums/ExpressionCase.html#/s:3PwZ14ExpressionCaseO2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p><code>ExpressionCase</code>s are trivially <code>Equatable</code> from their components.</p>","parent_name":"ExpressionCase"},"Classes/Expression.html#/s:3PwZ10ExpressionC17memoizationRecord14expressionCaseAcA011MemoizationD0C_AA0bF0Otcfc":{"name":"init(memoizationRecord:expressionCase:)","abstract":"<p>Initializes a new <code>Expression</code> from a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MemoizationRecord.html\">MemoizationRecord</a></code> and internal","parent_name":"Expression"},"Classes/Expression.html#/s:3PwZ10ExpressionC2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p><code>Expression</code>s are trivially <code>Equatable</code> from their components.</p>","parent_name":"Expression"},"Classes/Expression.html#/s:3PwZ10ExpressionC11descriptionSSvp":{"name":"description","abstract":"<p>A rendering of the <code>Expression</code> to a string. This is lazily computed","parent_name":"Expression"},"Classes/Expression.html#/s:3PwZ10ExpressionC14expressionCaseAcA0bD0O_tcfc":{"name":"init(expressionCase:)","abstract":"<p>Initialize an <code>Expression</code> without needing to give an explicit","parent_name":"Expression"},"Classes/Expression.html":{"name":"Expression","abstract":"<p>Expressions form trees in a grammar. We use a class instead of a struct to"},"Enums/ExpressionCase.html":{"name":"ExpressionCase","abstract":"<p>ExpressionCases encode the particular type of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Expression.html\">Expression</a></code> being dealt with.</p>"},"Enums/ContextCase.html":{"name":"ContextCase","abstract":"<p>ContextCases represent the context of a zipper&rsquo;s focused-on expression.</p>"},"Classes/MemoizationRecord.html":{"name":"MemoizationRecord","abstract":"<p>Memoization records are used to fix recursion, cycles, and duplication in"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC7Elementa":{"name":"Element","abstract":"<p>The type of elements in the array.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayCyACyxGqd__c7ElementQyd__RszSTRd__lufc":{"name":"init(_:)","abstract":"<p>Initializes the array from an existing sequence of values.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC12arrayLiteralACyxGxd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Initializes the array from an array literal. This means that you can write","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC6appendyyxF":{"name":"append(_:)","abstract":"<p>Adds a new element to the array at the end position.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC6insert_2atyx_SitF":{"name":"insert(_:at:)","abstract":"<p>Adds a new element to the array at a specific position.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC6insertyyxF":{"name":"insert(_:)","abstract":"<p>Adds a new element to the array at the start position.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC8Iteratora":{"name":"Iterator","abstract":"<p>Iterators over the <code>ReferenceArray</code> are generic.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC12makeIterators03AnyE0VyxGyF":{"name":"makeIterator()","abstract":"<p>Creates a new iterator for the <code>ReferenceArray</code>, wrapped as an","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC5Indexa":{"name":"Index","abstract":"<p>The type of indices into the <code>ReferenceArray</code>.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC10startIndexSivp":{"name":"startIndex","abstract":"<p>The start index of the collection.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC8endIndexSivp":{"name":"endIndex","abstract":"<p>The end index of the collection.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayCyxSicip":{"name":"subscript(_:)","abstract":"<p><code>ReferenceArray</code>s can be accessed by subscript, e.g.:</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>Produces the index immediately after the given index.</p>","parent_name":"ReferenceArray"},"Classes/ReferenceArray.html#/s:3PwZ14ReferenceArrayC2eeoiySbACyxG_AEtFZ":{"name":"==(_:_:)","abstract":"<p>When the elements of a <code>ReferenceArray</code> are <code>Equatable</code>, the","parent_name":"ReferenceArray"},"Basic%20Types.html#/s:3PwZ8Positiona":{"name":"Position","abstract":"<p>Positions are the indices of tokens within the input string being parsed.</p>"},"Basic%20Types.html#/s:3PwZ6Symbola":{"name":"Symbol","abstract":"<p>Symbols are the names given to productions within a grammar.</p>"},"Basic%20Types.html#/s:3PwZ3Taga":{"name":"Tag","abstract":"<p>Tags uniquely identify token types.</p>"},"Basic%20Types.html#/s:3PwZ5Tokena":{"name":"Token","abstract":"<p>Tokens are pairs consisting of a tag (identifying the type of the token) and"},"Classes/ReferenceArray.html":{"name":"ReferenceArray","abstract":"<p>The <code>ReferenceArray</code> is a wrapper around the standard <code>Array</code> that provides"},"Parsing.html#/s:3PwZ5parse11inputTokens11withGrammarSayAA10ExpressionCGSaySi3tag_SS6symboltG_AFtF":{"name":"parse(inputTokens:withGrammar:)","abstract":"<p>Parses a sequence of input tokens against a given grammar.</p>"},"Enums/AbstractGrammar.html#/s:3PwZ15AbstractGrammarO6SymbolyACSScACmF":{"name":"Symbol(_:)","abstract":"<p>Either a terminal or non-terminal symbol.</p>","parent_name":"AbstractGrammar"},"Enums/AbstractGrammar.html#/s:3PwZ15AbstractGrammarO13ConcatenationyACSayACGcACmF":{"name":"Concatenation(_:)","abstract":"<p>A sequence of expressions that must be considered in-order.</p>","parent_name":"AbstractGrammar"},"Enums/AbstractGrammar.html#/s:3PwZ15AbstractGrammarO11AlternationyACSayACGcACmF":{"name":"Alternation(_:)","abstract":"<p>A collection of non-deterministic expressions.</p>","parent_name":"AbstractGrammar"},"Enums/AbstractGrammar.html#/s:3PwZ15AbstractGrammarO13stringLiteralACSS_tcfc":{"name":"init(stringLiteral:)","abstract":"<p>Creates an <code>AbstractGrammar.Symbol</code> from a string literal.</p>","parent_name":"AbstractGrammar"},"Enums/AbstractGrammar.html#/s:3PwZ15AbstractGrammarO12arrayLiteralA2Cd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Creates an <code>AbstractGrammar.Alternation</code> from an array of","parent_name":"AbstractGrammar"},"Enums/GrammarError.html#/s:3PwZ12GrammarErrorO13NoStartSymbolyA2CmF":{"name":"NoStartSymbol","abstract":"<p>Thrown when no start symbol is present in a grammar.</p>","parent_name":"GrammarError"},"Enums/GrammarError.html#/s:3PwZ12GrammarErrorO14NoTagForSymbolyACSS_tcACmF":{"name":"NoTagForSymbol(symbol:)","abstract":"<p>Thrown when attempting to tokenize a symbol that has no matching token","parent_name":"GrammarError"},"Structs/Grammar.html#/s:3PwZ7GrammarV11startSymbolSSvpZ":{"name":"startSymbol","abstract":"<p>All <code>Grammar</code>s must contain a top-level start symbol to indicate the","parent_name":"Grammar"},"Structs/Grammar.html#/s:3PwZ7GrammarV8tokenMapSDySSSiGvp":{"name":"tokenMap","abstract":"<p>A map of token symbols to generated tags. This is useful for producing","parent_name":"Grammar"},"Structs/Grammar.html#/s:3PwZ7GrammarV4rootAA10ExpressionCvp":{"name":"root","abstract":"<p>The root <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Expression.html\">Expression</a></code> of the grammar after initialization. Use this for","parent_name":"Grammar"},"Structs/Grammar.html#/s:3PwZ7GrammarV23fromAbstractProductionsACSDySSAA0dB0OG_tKcfc":{"name":"init(fromAbstractProductions:)","abstract":"<p>Initializes a new grammar from a dictionary mapping production names to","parent_name":"Grammar"},"Structs/Grammar.html#/s:3PwZ7GrammarV15tokenizeStringsySaySi3tag_SS6symboltGSaySSGKF":{"name":"tokenizeStrings(_:)","abstract":"<p>Converts a sequence of strings into <code><a href=\"36f8f5912051ae747ef441d6511ca4cbBasic%20Types.html#/s:3PwZ5Tokena\">Token</a></code>s for parsing.</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:3PwZ7GrammarV15tokenizeStringsySays6ResultOySi3tag_SS6symboltAA0B5ErrorOGGSaySSGF":{"name":"tokenizeStrings(_:)","abstract":"<p>Converts a sequence of strings into <code><a href=\"36f8f5912051ae747ef441d6511ca4cbBasic%20Types.html#/s:3PwZ5Tokena\">Token</a></code>s for parsing. The result is a","parent_name":"Grammar"},"Structs/Grammar.html#/s:3PwZ7GrammarV5parse11inputTokensSayAA10ExpressionCGSaySi3tag_SS6symboltG_tF":{"name":"parse(inputTokens:)","abstract":"<p>Parses the grammar using the given input tokens.</p>","parent_name":"Grammar"},"Structs/Grammar.html#/s:3PwZ7GrammarV17dictionaryLiteralACSS_AA08AbstractB0Otd_tcfc":{"name":"init(dictionaryLiteral:)","abstract":"<p>Initializes a <code>Grammar</code> from a dictionary literal. Together with the","parent_name":"Grammar"},"Structs/Grammar.html":{"name":"Grammar","abstract":"<p>A <code>Grammar</code> is a collection of productions. A basic knowledge of formal"},"Enums/GrammarError.html":{"name":"GrammarError","abstract":"<p>Errors related to the creation of grammars of expressions.</p>"},"Enums/AbstractGrammar.html":{"name":"AbstractGrammar","abstract":"<p>A simplified grammar specification language.</p>"},"Grammars.html#/s:3PwZ2ppoiyAA15AbstractGrammarOAD_ADtF":{"name":"++(_:_:)","abstract":"<p>Concatenates two <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/AbstractGrammar.html\">AbstractGrammar</a></code>s into a single"},"Grammars.html":{"name":"Grammars"},"Parsing.html":{"name":"Parsing"},"Basic%20Types.html":{"name":"Basic Types"},"Grammar%20Types.html":{"name":"Grammar Types"},"Zippers.html":{"name":"Zippers"},"Sentinels.html":{"name":"Sentinels"}}